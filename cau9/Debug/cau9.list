
cau9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a34  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002b40  08002b40  00012b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b60  08002b60  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  08002b60  08002b60  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b60  08002b60  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b60  08002b60  00012b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b64  08002b64  00012b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08002b68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000034  08002b9c  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08002b9c  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   000080ba  00000000  00000000  0002005d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000161f  00000000  00000000  00028117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  00029738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d8  00000000  00000000  0002a0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016309  00000000  00000000  0002a9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000096e8  00000000  00000000  00040ca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081fc2  00000000  00000000  0004a391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cc353  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002730  00000000  00000000  000cc3a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000034 	.word	0x20000034
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b28 	.word	0x08002b28

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000038 	.word	0x20000038
 8000148:	08002b28 	.word	0x08002b28

0800014c <setTimer0>:
int timer2_flag = 0;

int TIMER_CYCLE = 10;

void setTimer0 (int duration)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	timer0_counter = duration / TIMER_CYCLE ;
 8000154:	4b07      	ldr	r3, [pc, #28]	; (8000174 <setTimer0+0x28>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	687a      	ldr	r2, [r7, #4]
 800015a:	fb92 f3f3 	sdiv	r3, r2, r3
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <setTimer0+0x2c>)
 8000160:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8000162:	4b06      	ldr	r3, [pc, #24]	; (800017c <setTimer0+0x30>)
 8000164:	2200      	movs	r2, #0
 8000166:	601a      	str	r2, [r3, #0]
}
 8000168:	bf00      	nop
 800016a:	370c      	adds	r7, #12
 800016c:	46bd      	mov	sp, r7
 800016e:	bc80      	pop	{r7}
 8000170:	4770      	bx	lr
 8000172:	bf00      	nop
 8000174:	20000000 	.word	0x20000000
 8000178:	20000050 	.word	0x20000050
 800017c:	20000054 	.word	0x20000054

08000180 <setTimer1>:

void setTimer1 (int duration)
{
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE ;
 8000188:	4b07      	ldr	r3, [pc, #28]	; (80001a8 <setTimer1+0x28>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	687a      	ldr	r2, [r7, #4]
 800018e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000192:	4a06      	ldr	r2, [pc, #24]	; (80001ac <setTimer1+0x2c>)
 8000194:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000196:	4b06      	ldr	r3, [pc, #24]	; (80001b0 <setTimer1+0x30>)
 8000198:	2200      	movs	r2, #0
 800019a:	601a      	str	r2, [r3, #0]
}
 800019c:	bf00      	nop
 800019e:	370c      	adds	r7, #12
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bc80      	pop	{r7}
 80001a4:	4770      	bx	lr
 80001a6:	bf00      	nop
 80001a8:	20000000 	.word	0x20000000
 80001ac:	20000058 	.word	0x20000058
 80001b0:	2000005c 	.word	0x2000005c

080001b4 <setTimer2>:

void setTimer2 (int duration)
{
 80001b4:	b480      	push	{r7}
 80001b6:	b083      	sub	sp, #12
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE ;
 80001bc:	4b07      	ldr	r3, [pc, #28]	; (80001dc <setTimer2+0x28>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	687a      	ldr	r2, [r7, #4]
 80001c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80001c6:	4a06      	ldr	r2, [pc, #24]	; (80001e0 <setTimer2+0x2c>)
 80001c8:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80001ca:	4b06      	ldr	r3, [pc, #24]	; (80001e4 <setTimer2+0x30>)
 80001cc:	2200      	movs	r2, #0
 80001ce:	601a      	str	r2, [r3, #0]
}
 80001d0:	bf00      	nop
 80001d2:	370c      	adds	r7, #12
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bc80      	pop	{r7}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	20000000 	.word	0x20000000
 80001e0:	20000060 	.word	0x20000060
 80001e4:	20000064 	.word	0x20000064

080001e8 <timer_run>:

void timer_run ()
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	if( timer0_counter > 0)
 80001ec:	4b19      	ldr	r3, [pc, #100]	; (8000254 <timer_run+0x6c>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	dd0b      	ble.n	800020c <timer_run+0x24>
	{
		timer0_counter --;
 80001f4:	4b17      	ldr	r3, [pc, #92]	; (8000254 <timer_run+0x6c>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	3b01      	subs	r3, #1
 80001fa:	4a16      	ldr	r2, [pc, #88]	; (8000254 <timer_run+0x6c>)
 80001fc:	6013      	str	r3, [r2, #0]
		if( timer0_counter == 0)
 80001fe:	4b15      	ldr	r3, [pc, #84]	; (8000254 <timer_run+0x6c>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d102      	bne.n	800020c <timer_run+0x24>
		{
			timer0_flag = 1;
 8000206:	4b14      	ldr	r3, [pc, #80]	; (8000258 <timer_run+0x70>)
 8000208:	2201      	movs	r2, #1
 800020a:	601a      	str	r2, [r3, #0]
		}
	}

	if( timer1_counter > 0)
 800020c:	4b13      	ldr	r3, [pc, #76]	; (800025c <timer_run+0x74>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	2b00      	cmp	r3, #0
 8000212:	dd0b      	ble.n	800022c <timer_run+0x44>
	{
		timer1_counter --;
 8000214:	4b11      	ldr	r3, [pc, #68]	; (800025c <timer_run+0x74>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	3b01      	subs	r3, #1
 800021a:	4a10      	ldr	r2, [pc, #64]	; (800025c <timer_run+0x74>)
 800021c:	6013      	str	r3, [r2, #0]
		if( timer1_counter == 0)
 800021e:	4b0f      	ldr	r3, [pc, #60]	; (800025c <timer_run+0x74>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	2b00      	cmp	r3, #0
 8000224:	d102      	bne.n	800022c <timer_run+0x44>
		{
			timer1_flag = 1;
 8000226:	4b0e      	ldr	r3, [pc, #56]	; (8000260 <timer_run+0x78>)
 8000228:	2201      	movs	r2, #1
 800022a:	601a      	str	r2, [r3, #0]
		}
	}

	if( timer2_counter > 0)
 800022c:	4b0d      	ldr	r3, [pc, #52]	; (8000264 <timer_run+0x7c>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	2b00      	cmp	r3, #0
 8000232:	dd0b      	ble.n	800024c <timer_run+0x64>
	{
		timer2_counter --;
 8000234:	4b0b      	ldr	r3, [pc, #44]	; (8000264 <timer_run+0x7c>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	3b01      	subs	r3, #1
 800023a:	4a0a      	ldr	r2, [pc, #40]	; (8000264 <timer_run+0x7c>)
 800023c:	6013      	str	r3, [r2, #0]
		if( timer2_counter == 0)
 800023e:	4b09      	ldr	r3, [pc, #36]	; (8000264 <timer_run+0x7c>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	2b00      	cmp	r3, #0
 8000244:	d102      	bne.n	800024c <timer_run+0x64>
		{
			timer2_flag = 1;
 8000246:	4b08      	ldr	r3, [pc, #32]	; (8000268 <timer_run+0x80>)
 8000248:	2201      	movs	r2, #1
 800024a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800024c:	bf00      	nop
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr
 8000254:	20000050 	.word	0x20000050
 8000258:	20000054 	.word	0x20000054
 800025c:	20000058 	.word	0x20000058
 8000260:	2000005c 	.word	0x2000005c
 8000264:	20000060 	.word	0x20000060
 8000268:	20000064 	.word	0x20000064

0800026c <display7SEG>:
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

void display7SEG(int num)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
	if (num == 0)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	2b00      	cmp	r3, #0
 8000278:	d122      	bne.n	80002c0 <display7SEG+0x54>
	{
		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,0);
 800027a:	2200      	movs	r2, #0
 800027c:	2101      	movs	r1, #1
 800027e:	48bd      	ldr	r0, [pc, #756]	; (8000574 <display7SEG+0x308>)
 8000280:	f001 fc28 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,0);
 8000284:	2200      	movs	r2, #0
 8000286:	2102      	movs	r1, #2
 8000288:	48ba      	ldr	r0, [pc, #744]	; (8000574 <display7SEG+0x308>)
 800028a:	f001 fc23 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,0);
 800028e:	2200      	movs	r2, #0
 8000290:	2104      	movs	r1, #4
 8000292:	48b8      	ldr	r0, [pc, #736]	; (8000574 <display7SEG+0x308>)
 8000294:	f001 fc1e 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,0);
 8000298:	2200      	movs	r2, #0
 800029a:	2108      	movs	r1, #8
 800029c:	48b5      	ldr	r0, [pc, #724]	; (8000574 <display7SEG+0x308>)
 800029e:	f001 fc19 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,0);
 80002a2:	2200      	movs	r2, #0
 80002a4:	2110      	movs	r1, #16
 80002a6:	48b3      	ldr	r0, [pc, #716]	; (8000574 <display7SEG+0x308>)
 80002a8:	f001 fc14 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,0);
 80002ac:	2200      	movs	r2, #0
 80002ae:	2120      	movs	r1, #32
 80002b0:	48b0      	ldr	r0, [pc, #704]	; (8000574 <display7SEG+0x308>)
 80002b2:	f001 fc0f 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,1);
 80002b6:	2201      	movs	r2, #1
 80002b8:	2140      	movs	r1, #64	; 0x40
 80002ba:	48ae      	ldr	r0, [pc, #696]	; (8000574 <display7SEG+0x308>)
 80002bc:	f001 fc0a 	bl	8001ad4 <HAL_GPIO_WritePin>
	}
	if (num == 1)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	2b01      	cmp	r3, #1
 80002c4:	d122      	bne.n	800030c <display7SEG+0xa0>
	{
		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,1);
 80002c6:	2201      	movs	r2, #1
 80002c8:	2101      	movs	r1, #1
 80002ca:	48aa      	ldr	r0, [pc, #680]	; (8000574 <display7SEG+0x308>)
 80002cc:	f001 fc02 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,0);
 80002d0:	2200      	movs	r2, #0
 80002d2:	2102      	movs	r1, #2
 80002d4:	48a7      	ldr	r0, [pc, #668]	; (8000574 <display7SEG+0x308>)
 80002d6:	f001 fbfd 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,0);
 80002da:	2200      	movs	r2, #0
 80002dc:	2104      	movs	r1, #4
 80002de:	48a5      	ldr	r0, [pc, #660]	; (8000574 <display7SEG+0x308>)
 80002e0:	f001 fbf8 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,1);
 80002e4:	2201      	movs	r2, #1
 80002e6:	2108      	movs	r1, #8
 80002e8:	48a2      	ldr	r0, [pc, #648]	; (8000574 <display7SEG+0x308>)
 80002ea:	f001 fbf3 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,1);
 80002ee:	2201      	movs	r2, #1
 80002f0:	2110      	movs	r1, #16
 80002f2:	48a0      	ldr	r0, [pc, #640]	; (8000574 <display7SEG+0x308>)
 80002f4:	f001 fbee 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,1);
 80002f8:	2201      	movs	r2, #1
 80002fa:	2120      	movs	r1, #32
 80002fc:	489d      	ldr	r0, [pc, #628]	; (8000574 <display7SEG+0x308>)
 80002fe:	f001 fbe9 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,1);
 8000302:	2201      	movs	r2, #1
 8000304:	2140      	movs	r1, #64	; 0x40
 8000306:	489b      	ldr	r0, [pc, #620]	; (8000574 <display7SEG+0x308>)
 8000308:	f001 fbe4 	bl	8001ad4 <HAL_GPIO_WritePin>
	}
	if (num == 2)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	2b02      	cmp	r3, #2
 8000310:	d122      	bne.n	8000358 <display7SEG+0xec>
	{
		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,0);
 8000312:	2200      	movs	r2, #0
 8000314:	2101      	movs	r1, #1
 8000316:	4897      	ldr	r0, [pc, #604]	; (8000574 <display7SEG+0x308>)
 8000318:	f001 fbdc 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,0);
 800031c:	2200      	movs	r2, #0
 800031e:	2102      	movs	r1, #2
 8000320:	4894      	ldr	r0, [pc, #592]	; (8000574 <display7SEG+0x308>)
 8000322:	f001 fbd7 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,1);
 8000326:	2201      	movs	r2, #1
 8000328:	2104      	movs	r1, #4
 800032a:	4892      	ldr	r0, [pc, #584]	; (8000574 <display7SEG+0x308>)
 800032c:	f001 fbd2 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,0);
 8000330:	2200      	movs	r2, #0
 8000332:	2108      	movs	r1, #8
 8000334:	488f      	ldr	r0, [pc, #572]	; (8000574 <display7SEG+0x308>)
 8000336:	f001 fbcd 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,0);
 800033a:	2200      	movs	r2, #0
 800033c:	2110      	movs	r1, #16
 800033e:	488d      	ldr	r0, [pc, #564]	; (8000574 <display7SEG+0x308>)
 8000340:	f001 fbc8 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,1);
 8000344:	2201      	movs	r2, #1
 8000346:	2120      	movs	r1, #32
 8000348:	488a      	ldr	r0, [pc, #552]	; (8000574 <display7SEG+0x308>)
 800034a:	f001 fbc3 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,0);
 800034e:	2200      	movs	r2, #0
 8000350:	2140      	movs	r1, #64	; 0x40
 8000352:	4888      	ldr	r0, [pc, #544]	; (8000574 <display7SEG+0x308>)
 8000354:	f001 fbbe 	bl	8001ad4 <HAL_GPIO_WritePin>
	}
	if (num == 3)
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	2b03      	cmp	r3, #3
 800035c:	d122      	bne.n	80003a4 <display7SEG+0x138>
	{
		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,0);
 800035e:	2200      	movs	r2, #0
 8000360:	2101      	movs	r1, #1
 8000362:	4884      	ldr	r0, [pc, #528]	; (8000574 <display7SEG+0x308>)
 8000364:	f001 fbb6 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,0);
 8000368:	2200      	movs	r2, #0
 800036a:	2102      	movs	r1, #2
 800036c:	4881      	ldr	r0, [pc, #516]	; (8000574 <display7SEG+0x308>)
 800036e:	f001 fbb1 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,0);
 8000372:	2200      	movs	r2, #0
 8000374:	2104      	movs	r1, #4
 8000376:	487f      	ldr	r0, [pc, #508]	; (8000574 <display7SEG+0x308>)
 8000378:	f001 fbac 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,0);
 800037c:	2200      	movs	r2, #0
 800037e:	2108      	movs	r1, #8
 8000380:	487c      	ldr	r0, [pc, #496]	; (8000574 <display7SEG+0x308>)
 8000382:	f001 fba7 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,1);
 8000386:	2201      	movs	r2, #1
 8000388:	2110      	movs	r1, #16
 800038a:	487a      	ldr	r0, [pc, #488]	; (8000574 <display7SEG+0x308>)
 800038c:	f001 fba2 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,1);
 8000390:	2201      	movs	r2, #1
 8000392:	2120      	movs	r1, #32
 8000394:	4877      	ldr	r0, [pc, #476]	; (8000574 <display7SEG+0x308>)
 8000396:	f001 fb9d 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,0);
 800039a:	2200      	movs	r2, #0
 800039c:	2140      	movs	r1, #64	; 0x40
 800039e:	4875      	ldr	r0, [pc, #468]	; (8000574 <display7SEG+0x308>)
 80003a0:	f001 fb98 	bl	8001ad4 <HAL_GPIO_WritePin>
	}
	if (num == 4)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	2b04      	cmp	r3, #4
 80003a8:	d122      	bne.n	80003f0 <display7SEG+0x184>
	{
		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,1);
 80003aa:	2201      	movs	r2, #1
 80003ac:	2101      	movs	r1, #1
 80003ae:	4871      	ldr	r0, [pc, #452]	; (8000574 <display7SEG+0x308>)
 80003b0:	f001 fb90 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,0);
 80003b4:	2200      	movs	r2, #0
 80003b6:	2102      	movs	r1, #2
 80003b8:	486e      	ldr	r0, [pc, #440]	; (8000574 <display7SEG+0x308>)
 80003ba:	f001 fb8b 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,0);
 80003be:	2200      	movs	r2, #0
 80003c0:	2104      	movs	r1, #4
 80003c2:	486c      	ldr	r0, [pc, #432]	; (8000574 <display7SEG+0x308>)
 80003c4:	f001 fb86 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,1);
 80003c8:	2201      	movs	r2, #1
 80003ca:	2108      	movs	r1, #8
 80003cc:	4869      	ldr	r0, [pc, #420]	; (8000574 <display7SEG+0x308>)
 80003ce:	f001 fb81 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,1);
 80003d2:	2201      	movs	r2, #1
 80003d4:	2110      	movs	r1, #16
 80003d6:	4867      	ldr	r0, [pc, #412]	; (8000574 <display7SEG+0x308>)
 80003d8:	f001 fb7c 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,0);
 80003dc:	2200      	movs	r2, #0
 80003de:	2120      	movs	r1, #32
 80003e0:	4864      	ldr	r0, [pc, #400]	; (8000574 <display7SEG+0x308>)
 80003e2:	f001 fb77 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,0);
 80003e6:	2200      	movs	r2, #0
 80003e8:	2140      	movs	r1, #64	; 0x40
 80003ea:	4862      	ldr	r0, [pc, #392]	; (8000574 <display7SEG+0x308>)
 80003ec:	f001 fb72 	bl	8001ad4 <HAL_GPIO_WritePin>
	}
	if (num == 5)
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	2b05      	cmp	r3, #5
 80003f4:	d122      	bne.n	800043c <display7SEG+0x1d0>
	{
		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,0);
 80003f6:	2200      	movs	r2, #0
 80003f8:	2101      	movs	r1, #1
 80003fa:	485e      	ldr	r0, [pc, #376]	; (8000574 <display7SEG+0x308>)
 80003fc:	f001 fb6a 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,1);
 8000400:	2201      	movs	r2, #1
 8000402:	2102      	movs	r1, #2
 8000404:	485b      	ldr	r0, [pc, #364]	; (8000574 <display7SEG+0x308>)
 8000406:	f001 fb65 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,0);
 800040a:	2200      	movs	r2, #0
 800040c:	2104      	movs	r1, #4
 800040e:	4859      	ldr	r0, [pc, #356]	; (8000574 <display7SEG+0x308>)
 8000410:	f001 fb60 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,0);
 8000414:	2200      	movs	r2, #0
 8000416:	2108      	movs	r1, #8
 8000418:	4856      	ldr	r0, [pc, #344]	; (8000574 <display7SEG+0x308>)
 800041a:	f001 fb5b 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,1);
 800041e:	2201      	movs	r2, #1
 8000420:	2110      	movs	r1, #16
 8000422:	4854      	ldr	r0, [pc, #336]	; (8000574 <display7SEG+0x308>)
 8000424:	f001 fb56 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,0);
 8000428:	2200      	movs	r2, #0
 800042a:	2120      	movs	r1, #32
 800042c:	4851      	ldr	r0, [pc, #324]	; (8000574 <display7SEG+0x308>)
 800042e:	f001 fb51 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,0);
 8000432:	2200      	movs	r2, #0
 8000434:	2140      	movs	r1, #64	; 0x40
 8000436:	484f      	ldr	r0, [pc, #316]	; (8000574 <display7SEG+0x308>)
 8000438:	f001 fb4c 	bl	8001ad4 <HAL_GPIO_WritePin>
	}
	if (num == 6)
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	2b06      	cmp	r3, #6
 8000440:	d122      	bne.n	8000488 <display7SEG+0x21c>
	{
		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,0);
 8000442:	2200      	movs	r2, #0
 8000444:	2101      	movs	r1, #1
 8000446:	484b      	ldr	r0, [pc, #300]	; (8000574 <display7SEG+0x308>)
 8000448:	f001 fb44 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,1);
 800044c:	2201      	movs	r2, #1
 800044e:	2102      	movs	r1, #2
 8000450:	4848      	ldr	r0, [pc, #288]	; (8000574 <display7SEG+0x308>)
 8000452:	f001 fb3f 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,0);
 8000456:	2200      	movs	r2, #0
 8000458:	2104      	movs	r1, #4
 800045a:	4846      	ldr	r0, [pc, #280]	; (8000574 <display7SEG+0x308>)
 800045c:	f001 fb3a 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,0);
 8000460:	2200      	movs	r2, #0
 8000462:	2108      	movs	r1, #8
 8000464:	4843      	ldr	r0, [pc, #268]	; (8000574 <display7SEG+0x308>)
 8000466:	f001 fb35 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,0);
 800046a:	2200      	movs	r2, #0
 800046c:	2110      	movs	r1, #16
 800046e:	4841      	ldr	r0, [pc, #260]	; (8000574 <display7SEG+0x308>)
 8000470:	f001 fb30 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,0);
 8000474:	2200      	movs	r2, #0
 8000476:	2120      	movs	r1, #32
 8000478:	483e      	ldr	r0, [pc, #248]	; (8000574 <display7SEG+0x308>)
 800047a:	f001 fb2b 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,0);
 800047e:	2200      	movs	r2, #0
 8000480:	2140      	movs	r1, #64	; 0x40
 8000482:	483c      	ldr	r0, [pc, #240]	; (8000574 <display7SEG+0x308>)
 8000484:	f001 fb26 	bl	8001ad4 <HAL_GPIO_WritePin>
	}
	if (num == 7)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	2b07      	cmp	r3, #7
 800048c:	d122      	bne.n	80004d4 <display7SEG+0x268>
	{
		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,0);
 800048e:	2200      	movs	r2, #0
 8000490:	2101      	movs	r1, #1
 8000492:	4838      	ldr	r0, [pc, #224]	; (8000574 <display7SEG+0x308>)
 8000494:	f001 fb1e 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,0);
 8000498:	2200      	movs	r2, #0
 800049a:	2102      	movs	r1, #2
 800049c:	4835      	ldr	r0, [pc, #212]	; (8000574 <display7SEG+0x308>)
 800049e:	f001 fb19 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,0);
 80004a2:	2200      	movs	r2, #0
 80004a4:	2104      	movs	r1, #4
 80004a6:	4833      	ldr	r0, [pc, #204]	; (8000574 <display7SEG+0x308>)
 80004a8:	f001 fb14 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,1);
 80004ac:	2201      	movs	r2, #1
 80004ae:	2108      	movs	r1, #8
 80004b0:	4830      	ldr	r0, [pc, #192]	; (8000574 <display7SEG+0x308>)
 80004b2:	f001 fb0f 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,1);
 80004b6:	2201      	movs	r2, #1
 80004b8:	2110      	movs	r1, #16
 80004ba:	482e      	ldr	r0, [pc, #184]	; (8000574 <display7SEG+0x308>)
 80004bc:	f001 fb0a 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,1);
 80004c0:	2201      	movs	r2, #1
 80004c2:	2120      	movs	r1, #32
 80004c4:	482b      	ldr	r0, [pc, #172]	; (8000574 <display7SEG+0x308>)
 80004c6:	f001 fb05 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,1);
 80004ca:	2201      	movs	r2, #1
 80004cc:	2140      	movs	r1, #64	; 0x40
 80004ce:	4829      	ldr	r0, [pc, #164]	; (8000574 <display7SEG+0x308>)
 80004d0:	f001 fb00 	bl	8001ad4 <HAL_GPIO_WritePin>
	}
	if (num == 8)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2b08      	cmp	r3, #8
 80004d8:	d122      	bne.n	8000520 <display7SEG+0x2b4>
	{
		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,0);
 80004da:	2200      	movs	r2, #0
 80004dc:	2101      	movs	r1, #1
 80004de:	4825      	ldr	r0, [pc, #148]	; (8000574 <display7SEG+0x308>)
 80004e0:	f001 faf8 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,0);
 80004e4:	2200      	movs	r2, #0
 80004e6:	2102      	movs	r1, #2
 80004e8:	4822      	ldr	r0, [pc, #136]	; (8000574 <display7SEG+0x308>)
 80004ea:	f001 faf3 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2104      	movs	r1, #4
 80004f2:	4820      	ldr	r0, [pc, #128]	; (8000574 <display7SEG+0x308>)
 80004f4:	f001 faee 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,0);
 80004f8:	2200      	movs	r2, #0
 80004fa:	2108      	movs	r1, #8
 80004fc:	481d      	ldr	r0, [pc, #116]	; (8000574 <display7SEG+0x308>)
 80004fe:	f001 fae9 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,0);
 8000502:	2200      	movs	r2, #0
 8000504:	2110      	movs	r1, #16
 8000506:	481b      	ldr	r0, [pc, #108]	; (8000574 <display7SEG+0x308>)
 8000508:	f001 fae4 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,0);
 800050c:	2200      	movs	r2, #0
 800050e:	2120      	movs	r1, #32
 8000510:	4818      	ldr	r0, [pc, #96]	; (8000574 <display7SEG+0x308>)
 8000512:	f001 fadf 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,0);
 8000516:	2200      	movs	r2, #0
 8000518:	2140      	movs	r1, #64	; 0x40
 800051a:	4816      	ldr	r0, [pc, #88]	; (8000574 <display7SEG+0x308>)
 800051c:	f001 fada 	bl	8001ad4 <HAL_GPIO_WritePin>
	}
	if (num == 9)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2b09      	cmp	r3, #9
 8000524:	d122      	bne.n	800056c <display7SEG+0x300>
	{
		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,0);
 8000526:	2200      	movs	r2, #0
 8000528:	2101      	movs	r1, #1
 800052a:	4812      	ldr	r0, [pc, #72]	; (8000574 <display7SEG+0x308>)
 800052c:	f001 fad2 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,0);
 8000530:	2200      	movs	r2, #0
 8000532:	2102      	movs	r1, #2
 8000534:	480f      	ldr	r0, [pc, #60]	; (8000574 <display7SEG+0x308>)
 8000536:	f001 facd 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,0);
 800053a:	2200      	movs	r2, #0
 800053c:	2104      	movs	r1, #4
 800053e:	480d      	ldr	r0, [pc, #52]	; (8000574 <display7SEG+0x308>)
 8000540:	f001 fac8 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,0);
 8000544:	2200      	movs	r2, #0
 8000546:	2108      	movs	r1, #8
 8000548:	480a      	ldr	r0, [pc, #40]	; (8000574 <display7SEG+0x308>)
 800054a:	f001 fac3 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,1);
 800054e:	2201      	movs	r2, #1
 8000550:	2110      	movs	r1, #16
 8000552:	4808      	ldr	r0, [pc, #32]	; (8000574 <display7SEG+0x308>)
 8000554:	f001 fabe 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,0);
 8000558:	2200      	movs	r2, #0
 800055a:	2120      	movs	r1, #32
 800055c:	4805      	ldr	r0, [pc, #20]	; (8000574 <display7SEG+0x308>)
 800055e:	f001 fab9 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,0);
 8000562:	2200      	movs	r2, #0
 8000564:	2140      	movs	r1, #64	; 0x40
 8000566:	4803      	ldr	r0, [pc, #12]	; (8000574 <display7SEG+0x308>)
 8000568:	f001 fab4 	bl	8001ad4 <HAL_GPIO_WritePin>
	}
}
 800056c:	bf00      	nop
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40010c00 	.word	0x40010c00

08000578 <update7SEG>:

void update7SEG (int index)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	switch(index)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2b02      	cmp	r3, #2
 8000584:	d035      	beq.n	80005f2 <update7SEG+0x7a>
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2b02      	cmp	r3, #2
 800058a:	dc43      	bgt.n	8000614 <update7SEG+0x9c>
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d003      	beq.n	800059a <update7SEG+0x22>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d01c      	beq.n	80005d2 <update7SEG+0x5a>
 8000598:	e03c      	b.n	8000614 <update7SEG+0x9c>
	{
		case 0:		// Display the first 7 SEG with led_buffer [0]
			display7SEG(led_buffer [0]);
 800059a:	4b29      	ldr	r3, [pc, #164]	; (8000640 <update7SEG+0xc8>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4618      	mov	r0, r3
 80005a0:	f7ff fe64 	bl	800026c <display7SEG>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);	// seg 1 on
 80005a4:	2200      	movs	r2, #0
 80005a6:	2140      	movs	r1, #64	; 0x40
 80005a8:	4826      	ldr	r0, [pc, #152]	; (8000644 <update7SEG+0xcc>)
 80005aa:	f001 fa93 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);	// seg 2 off
 80005ae:	2201      	movs	r2, #1
 80005b0:	2180      	movs	r1, #128	; 0x80
 80005b2:	4824      	ldr	r0, [pc, #144]	; (8000644 <update7SEG+0xcc>)
 80005b4:	f001 fa8e 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);	// seg 3 off
 80005b8:	2201      	movs	r2, #1
 80005ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005be:	4821      	ldr	r0, [pc, #132]	; (8000644 <update7SEG+0xcc>)
 80005c0:	f001 fa88 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);	// seg 4 off
 80005c4:	2201      	movs	r2, #1
 80005c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ca:	481e      	ldr	r0, [pc, #120]	; (8000644 <update7SEG+0xcc>)
 80005cc:	f001 fa82 	bl	8001ad4 <HAL_GPIO_WritePin>
			break;
 80005d0:	e032      	b.n	8000638 <update7SEG+0xc0>
		case 1:		// Display the second 7 SEG with led_buffer [1]
			display7SEG(led_buffer [1]);
 80005d2:	4b1b      	ldr	r3, [pc, #108]	; (8000640 <update7SEG+0xc8>)
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff fe48 	bl	800026c <display7SEG>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);	// seg 1 off
 80005dc:	2201      	movs	r2, #1
 80005de:	2140      	movs	r1, #64	; 0x40
 80005e0:	4818      	ldr	r0, [pc, #96]	; (8000644 <update7SEG+0xcc>)
 80005e2:	f001 fa77 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);	// seg 2 on
 80005e6:	2200      	movs	r2, #0
 80005e8:	2180      	movs	r1, #128	; 0x80
 80005ea:	4816      	ldr	r0, [pc, #88]	; (8000644 <update7SEG+0xcc>)
 80005ec:	f001 fa72 	bl	8001ad4 <HAL_GPIO_WritePin>
			break;
 80005f0:	e022      	b.n	8000638 <update7SEG+0xc0>
		case 2:		// Display the third 7 SEG with led_buffer [2]
			display7SEG(led_buffer [2]);
 80005f2:	4b13      	ldr	r3, [pc, #76]	; (8000640 <update7SEG+0xc8>)
 80005f4:	689b      	ldr	r3, [r3, #8]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff fe38 	bl	800026c <display7SEG>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);	// seg 2 off
 80005fc:	2201      	movs	r2, #1
 80005fe:	2180      	movs	r1, #128	; 0x80
 8000600:	4810      	ldr	r0, [pc, #64]	; (8000644 <update7SEG+0xcc>)
 8000602:	f001 fa67 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);	// seg 3 on
 8000606:	2200      	movs	r2, #0
 8000608:	f44f 7180 	mov.w	r1, #256	; 0x100
 800060c:	480d      	ldr	r0, [pc, #52]	; (8000644 <update7SEG+0xcc>)
 800060e:	f001 fa61 	bl	8001ad4 <HAL_GPIO_WritePin>
			break;
 8000612:	e011      	b.n	8000638 <update7SEG+0xc0>
		default:	// Display the forth 7 SEG with led_buffer [3]
			display7SEG(led_buffer [3]);
 8000614:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <update7SEG+0xc8>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	4618      	mov	r0, r3
 800061a:	f7ff fe27 	bl	800026c <display7SEG>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);	// seg 3 off
 800061e:	2201      	movs	r2, #1
 8000620:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000624:	4807      	ldr	r0, [pc, #28]	; (8000644 <update7SEG+0xcc>)
 8000626:	f001 fa55 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);	// seg 4 on
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000630:	4804      	ldr	r0, [pc, #16]	; (8000644 <update7SEG+0xcc>)
 8000632:	f001 fa4f 	bl	8001ad4 <HAL_GPIO_WritePin>
		break;
 8000636:	bf00      	nop
	}
}
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000004 	.word	0x20000004
 8000644:	40010800 	.word	0x40010800

08000648 <updateClockBuffer>:

void updateClockBuffer()
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
	led_buffer [0] = hour/10;
 800064c:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <updateClockBuffer+0x70>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a1a      	ldr	r2, [pc, #104]	; (80006bc <updateClockBuffer+0x74>)
 8000652:	fb82 1203 	smull	r1, r2, r2, r3
 8000656:	1092      	asrs	r2, r2, #2
 8000658:	17db      	asrs	r3, r3, #31
 800065a:	1ad3      	subs	r3, r2, r3
 800065c:	4a18      	ldr	r2, [pc, #96]	; (80006c0 <updateClockBuffer+0x78>)
 800065e:	6013      	str	r3, [r2, #0]
	led_buffer [1] = hour%10;
 8000660:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <updateClockBuffer+0x70>)
 8000662:	6819      	ldr	r1, [r3, #0]
 8000664:	4b15      	ldr	r3, [pc, #84]	; (80006bc <updateClockBuffer+0x74>)
 8000666:	fb83 2301 	smull	r2, r3, r3, r1
 800066a:	109a      	asrs	r2, r3, #2
 800066c:	17cb      	asrs	r3, r1, #31
 800066e:	1ad2      	subs	r2, r2, r3
 8000670:	4613      	mov	r3, r2
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	4413      	add	r3, r2
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	1aca      	subs	r2, r1, r3
 800067a:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <updateClockBuffer+0x78>)
 800067c:	605a      	str	r2, [r3, #4]
	led_buffer [2] = minute/10;
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <updateClockBuffer+0x7c>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a0e      	ldr	r2, [pc, #56]	; (80006bc <updateClockBuffer+0x74>)
 8000684:	fb82 1203 	smull	r1, r2, r2, r3
 8000688:	1092      	asrs	r2, r2, #2
 800068a:	17db      	asrs	r3, r3, #31
 800068c:	1ad3      	subs	r3, r2, r3
 800068e:	4a0c      	ldr	r2, [pc, #48]	; (80006c0 <updateClockBuffer+0x78>)
 8000690:	6093      	str	r3, [r2, #8]
	led_buffer [3] = minute%10;
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <updateClockBuffer+0x7c>)
 8000694:	6819      	ldr	r1, [r3, #0]
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <updateClockBuffer+0x74>)
 8000698:	fb83 2301 	smull	r2, r3, r3, r1
 800069c:	109a      	asrs	r2, r3, #2
 800069e:	17cb      	asrs	r3, r1, #31
 80006a0:	1ad2      	subs	r2, r2, r3
 80006a2:	4613      	mov	r3, r2
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	4413      	add	r3, r2
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	1aca      	subs	r2, r1, r3
 80006ac:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <updateClockBuffer+0x78>)
 80006ae:	60da      	str	r2, [r3, #12]
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr
 80006b8:	20000014 	.word	0x20000014
 80006bc:	66666667 	.word	0x66666667
 80006c0:	20000004 	.word	0x20000004
 80006c4:	20000018 	.word	0x20000018

080006c8 <updateLEDMatrix>:

void updateLEDMatrix (int index )
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	switch (index)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2b07      	cmp	r3, #7
 80006d4:	f200 84b8 	bhi.w	8001048 <updateLEDMatrix+0x980>
 80006d8:	a201      	add	r2, pc, #4	; (adr r2, 80006e0 <updateLEDMatrix+0x18>)
 80006da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006de:	bf00      	nop
 80006e0:	08000701 	.word	0x08000701
 80006e4:	08000827 	.word	0x08000827
 80006e8:	08000959 	.word	0x08000959
 80006ec:	08000a7d 	.word	0x08000a7d
 80006f0:	08000bad 	.word	0x08000bad
 80006f4:	08000cd1 	.word	0x08000cd1
 80006f8:	08000e01 	.word	0x08000e01
 80006fc:	08000f25 	.word	0x08000f25
	{
		case 0:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, 0);
 8000700:	2200      	movs	r2, #0
 8000702:	2104      	movs	r1, #4
 8000704:	4891      	ldr	r0, [pc, #580]	; (800094c <updateLEDMatrix+0x284>)
 8000706:	f001 f9e5 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1);
 800070a:	2201      	movs	r2, #1
 800070c:	2108      	movs	r1, #8
 800070e:	488f      	ldr	r0, [pc, #572]	; (800094c <updateLEDMatrix+0x284>)
 8000710:	f001 f9e0 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1);
 8000714:	2201      	movs	r2, #1
 8000716:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800071a:	488c      	ldr	r0, [pc, #560]	; (800094c <updateLEDMatrix+0x284>)
 800071c:	f001 f9da 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1);
 8000720:	2201      	movs	r2, #1
 8000722:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000726:	4889      	ldr	r0, [pc, #548]	; (800094c <updateLEDMatrix+0x284>)
 8000728:	f001 f9d4 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1);
 800072c:	2201      	movs	r2, #1
 800072e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000732:	4886      	ldr	r0, [pc, #536]	; (800094c <updateLEDMatrix+0x284>)
 8000734:	f001 f9ce 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1);
 8000738:	2201      	movs	r2, #1
 800073a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800073e:	4883      	ldr	r0, [pc, #524]	; (800094c <updateLEDMatrix+0x284>)
 8000740:	f001 f9c8 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1);
 8000744:	2201      	movs	r2, #1
 8000746:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800074a:	4880      	ldr	r0, [pc, #512]	; (800094c <updateLEDMatrix+0x284>)
 800074c:	f001 f9c2 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1);
 8000750:	2201      	movs	r2, #1
 8000752:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000756:	487d      	ldr	r0, [pc, #500]	; (800094c <updateLEDMatrix+0x284>)
 8000758:	f001 f9bc 	bl	8001ad4 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, ((matrix_buffer[0] >> 0)&1));
 800075c:	4b7c      	ldr	r3, [pc, #496]	; (8000950 <updateLEDMatrix+0x288>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	f003 0301 	and.w	r3, r3, #1
 8000764:	b2db      	uxtb	r3, r3
 8000766:	461a      	mov	r2, r3
 8000768:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076c:	4879      	ldr	r0, [pc, #484]	; (8000954 <updateLEDMatrix+0x28c>)
 800076e:	f001 f9b1 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, ((matrix_buffer[0] >> 1)&1));
 8000772:	4b77      	ldr	r3, [pc, #476]	; (8000950 <updateLEDMatrix+0x288>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	085b      	lsrs	r3, r3, #1
 8000778:	b2db      	uxtb	r3, r3
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	b2db      	uxtb	r3, r3
 8000780:	461a      	mov	r2, r3
 8000782:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000786:	4873      	ldr	r0, [pc, #460]	; (8000954 <updateLEDMatrix+0x28c>)
 8000788:	f001 f9a4 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, ((matrix_buffer[0] >> 2)&1));
 800078c:	4b70      	ldr	r3, [pc, #448]	; (8000950 <updateLEDMatrix+0x288>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	089b      	lsrs	r3, r3, #2
 8000792:	b2db      	uxtb	r3, r3
 8000794:	f003 0301 	and.w	r3, r3, #1
 8000798:	b2db      	uxtb	r3, r3
 800079a:	461a      	mov	r2, r3
 800079c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007a0:	486c      	ldr	r0, [pc, #432]	; (8000954 <updateLEDMatrix+0x28c>)
 80007a2:	f001 f997 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, ((matrix_buffer[0] >> 3)&1));
 80007a6:	4b6a      	ldr	r3, [pc, #424]	; (8000950 <updateLEDMatrix+0x288>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	08db      	lsrs	r3, r3, #3
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	461a      	mov	r2, r3
 80007b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ba:	4866      	ldr	r0, [pc, #408]	; (8000954 <updateLEDMatrix+0x28c>)
 80007bc:	f001 f98a 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, ((matrix_buffer[0] >> 4)&1));
 80007c0:	4b63      	ldr	r3, [pc, #396]	; (8000950 <updateLEDMatrix+0x288>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	091b      	lsrs	r3, r3, #4
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	f003 0301 	and.w	r3, r3, #1
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	461a      	mov	r2, r3
 80007d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007d4:	485f      	ldr	r0, [pc, #380]	; (8000954 <updateLEDMatrix+0x28c>)
 80007d6:	f001 f97d 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, ((matrix_buffer[0] >> 5)&1));
 80007da:	4b5d      	ldr	r3, [pc, #372]	; (8000950 <updateLEDMatrix+0x288>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	095b      	lsrs	r3, r3, #5
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	461a      	mov	r2, r3
 80007ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ee:	4859      	ldr	r0, [pc, #356]	; (8000954 <updateLEDMatrix+0x28c>)
 80007f0:	f001 f970 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, ((matrix_buffer[0] >> 6)&1));
 80007f4:	4b56      	ldr	r3, [pc, #344]	; (8000950 <updateLEDMatrix+0x288>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	099b      	lsrs	r3, r3, #6
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	f003 0301 	and.w	r3, r3, #1
 8000800:	b2db      	uxtb	r3, r3
 8000802:	461a      	mov	r2, r3
 8000804:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000808:	4852      	ldr	r0, [pc, #328]	; (8000954 <updateLEDMatrix+0x28c>)
 800080a:	f001 f963 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, ((matrix_buffer[0] >> 7)&1));
 800080e:	4b50      	ldr	r3, [pc, #320]	; (8000950 <updateLEDMatrix+0x288>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	09db      	lsrs	r3, r3, #7
 8000814:	b2db      	uxtb	r3, r3
 8000816:	461a      	mov	r2, r3
 8000818:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800081c:	484d      	ldr	r0, [pc, #308]	; (8000954 <updateLEDMatrix+0x28c>)
 800081e:	f001 f959 	bl	8001ad4 <HAL_GPIO_WritePin>
			break;
 8000822:	f000 bc12 	b.w	800104a <updateLEDMatrix+0x982>
		case 1:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, 1);
 8000826:	2201      	movs	r2, #1
 8000828:	2104      	movs	r1, #4
 800082a:	4848      	ldr	r0, [pc, #288]	; (800094c <updateLEDMatrix+0x284>)
 800082c:	f001 f952 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 0);
 8000830:	2200      	movs	r2, #0
 8000832:	2108      	movs	r1, #8
 8000834:	4845      	ldr	r0, [pc, #276]	; (800094c <updateLEDMatrix+0x284>)
 8000836:	f001 f94d 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1);
 800083a:	2201      	movs	r2, #1
 800083c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000840:	4842      	ldr	r0, [pc, #264]	; (800094c <updateLEDMatrix+0x284>)
 8000842:	f001 f947 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1);
 8000846:	2201      	movs	r2, #1
 8000848:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800084c:	483f      	ldr	r0, [pc, #252]	; (800094c <updateLEDMatrix+0x284>)
 800084e:	f001 f941 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1);
 8000852:	2201      	movs	r2, #1
 8000854:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000858:	483c      	ldr	r0, [pc, #240]	; (800094c <updateLEDMatrix+0x284>)
 800085a:	f001 f93b 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1);
 800085e:	2201      	movs	r2, #1
 8000860:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000864:	4839      	ldr	r0, [pc, #228]	; (800094c <updateLEDMatrix+0x284>)
 8000866:	f001 f935 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1);
 800086a:	2201      	movs	r2, #1
 800086c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000870:	4836      	ldr	r0, [pc, #216]	; (800094c <updateLEDMatrix+0x284>)
 8000872:	f001 f92f 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1);
 8000876:	2201      	movs	r2, #1
 8000878:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800087c:	4833      	ldr	r0, [pc, #204]	; (800094c <updateLEDMatrix+0x284>)
 800087e:	f001 f929 	bl	8001ad4 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, ((matrix_buffer[1] >> 0)&1));
 8000882:	4b33      	ldr	r3, [pc, #204]	; (8000950 <updateLEDMatrix+0x288>)
 8000884:	785b      	ldrb	r3, [r3, #1]
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	b2db      	uxtb	r3, r3
 800088c:	461a      	mov	r2, r3
 800088e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000892:	4830      	ldr	r0, [pc, #192]	; (8000954 <updateLEDMatrix+0x28c>)
 8000894:	f001 f91e 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, ((matrix_buffer[1] >> 1)&1));
 8000898:	4b2d      	ldr	r3, [pc, #180]	; (8000950 <updateLEDMatrix+0x288>)
 800089a:	785b      	ldrb	r3, [r3, #1]
 800089c:	085b      	lsrs	r3, r3, #1
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	f003 0301 	and.w	r3, r3, #1
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	461a      	mov	r2, r3
 80008a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ac:	4829      	ldr	r0, [pc, #164]	; (8000954 <updateLEDMatrix+0x28c>)
 80008ae:	f001 f911 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, ((matrix_buffer[1] >> 2)&1));
 80008b2:	4b27      	ldr	r3, [pc, #156]	; (8000950 <updateLEDMatrix+0x288>)
 80008b4:	785b      	ldrb	r3, [r3, #1]
 80008b6:	089b      	lsrs	r3, r3, #2
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	461a      	mov	r2, r3
 80008c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008c6:	4823      	ldr	r0, [pc, #140]	; (8000954 <updateLEDMatrix+0x28c>)
 80008c8:	f001 f904 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, ((matrix_buffer[1] >> 3)&1));
 80008cc:	4b20      	ldr	r3, [pc, #128]	; (8000950 <updateLEDMatrix+0x288>)
 80008ce:	785b      	ldrb	r3, [r3, #1]
 80008d0:	08db      	lsrs	r3, r3, #3
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	f003 0301 	and.w	r3, r3, #1
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	461a      	mov	r2, r3
 80008dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008e0:	481c      	ldr	r0, [pc, #112]	; (8000954 <updateLEDMatrix+0x28c>)
 80008e2:	f001 f8f7 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, ((matrix_buffer[1] >> 4)&1));
 80008e6:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <updateLEDMatrix+0x288>)
 80008e8:	785b      	ldrb	r3, [r3, #1]
 80008ea:	091b      	lsrs	r3, r3, #4
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	461a      	mov	r2, r3
 80008f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008fa:	4816      	ldr	r0, [pc, #88]	; (8000954 <updateLEDMatrix+0x28c>)
 80008fc:	f001 f8ea 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, ((matrix_buffer[1] >> 5)&1));
 8000900:	4b13      	ldr	r3, [pc, #76]	; (8000950 <updateLEDMatrix+0x288>)
 8000902:	785b      	ldrb	r3, [r3, #1]
 8000904:	095b      	lsrs	r3, r3, #5
 8000906:	b2db      	uxtb	r3, r3
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	b2db      	uxtb	r3, r3
 800090e:	461a      	mov	r2, r3
 8000910:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000914:	480f      	ldr	r0, [pc, #60]	; (8000954 <updateLEDMatrix+0x28c>)
 8000916:	f001 f8dd 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, ((matrix_buffer[1] >> 6)&1));
 800091a:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <updateLEDMatrix+0x288>)
 800091c:	785b      	ldrb	r3, [r3, #1]
 800091e:	099b      	lsrs	r3, r3, #6
 8000920:	b2db      	uxtb	r3, r3
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	b2db      	uxtb	r3, r3
 8000928:	461a      	mov	r2, r3
 800092a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800092e:	4809      	ldr	r0, [pc, #36]	; (8000954 <updateLEDMatrix+0x28c>)
 8000930:	f001 f8d0 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, ((matrix_buffer[1] >> 7)&1));
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <updateLEDMatrix+0x288>)
 8000936:	785b      	ldrb	r3, [r3, #1]
 8000938:	09db      	lsrs	r3, r3, #7
 800093a:	b2db      	uxtb	r3, r3
 800093c:	461a      	mov	r2, r3
 800093e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000942:	4804      	ldr	r0, [pc, #16]	; (8000954 <updateLEDMatrix+0x28c>)
 8000944:	f001 f8c6 	bl	8001ad4 <HAL_GPIO_WritePin>
			break;
 8000948:	e37f      	b.n	800104a <updateLEDMatrix+0x982>
 800094a:	bf00      	nop
 800094c:	40010800 	.word	0x40010800
 8000950:	20000020 	.word	0x20000020
 8000954:	40010c00 	.word	0x40010c00
		case 2:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, 1);
 8000958:	2201      	movs	r2, #1
 800095a:	2104      	movs	r1, #4
 800095c:	4890      	ldr	r0, [pc, #576]	; (8000ba0 <updateLEDMatrix+0x4d8>)
 800095e:	f001 f8b9 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1);
 8000962:	2201      	movs	r2, #1
 8000964:	2108      	movs	r1, #8
 8000966:	488e      	ldr	r0, [pc, #568]	; (8000ba0 <updateLEDMatrix+0x4d8>)
 8000968:	f001 f8b4 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 0);
 800096c:	2200      	movs	r2, #0
 800096e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000972:	488b      	ldr	r0, [pc, #556]	; (8000ba0 <updateLEDMatrix+0x4d8>)
 8000974:	f001 f8ae 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1);
 8000978:	2201      	movs	r2, #1
 800097a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800097e:	4888      	ldr	r0, [pc, #544]	; (8000ba0 <updateLEDMatrix+0x4d8>)
 8000980:	f001 f8a8 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1);
 8000984:	2201      	movs	r2, #1
 8000986:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800098a:	4885      	ldr	r0, [pc, #532]	; (8000ba0 <updateLEDMatrix+0x4d8>)
 800098c:	f001 f8a2 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1);
 8000990:	2201      	movs	r2, #1
 8000992:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000996:	4882      	ldr	r0, [pc, #520]	; (8000ba0 <updateLEDMatrix+0x4d8>)
 8000998:	f001 f89c 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1);
 800099c:	2201      	movs	r2, #1
 800099e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009a2:	487f      	ldr	r0, [pc, #508]	; (8000ba0 <updateLEDMatrix+0x4d8>)
 80009a4:	f001 f896 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1);
 80009a8:	2201      	movs	r2, #1
 80009aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009ae:	487c      	ldr	r0, [pc, #496]	; (8000ba0 <updateLEDMatrix+0x4d8>)
 80009b0:	f001 f890 	bl	8001ad4 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, ((matrix_buffer[2] >> 0)&1));
 80009b4:	4b7b      	ldr	r3, [pc, #492]	; (8000ba4 <updateLEDMatrix+0x4dc>)
 80009b6:	789b      	ldrb	r3, [r3, #2]
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	461a      	mov	r2, r3
 80009c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c4:	4878      	ldr	r0, [pc, #480]	; (8000ba8 <updateLEDMatrix+0x4e0>)
 80009c6:	f001 f885 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, ((matrix_buffer[2] >> 1)&1));
 80009ca:	4b76      	ldr	r3, [pc, #472]	; (8000ba4 <updateLEDMatrix+0x4dc>)
 80009cc:	789b      	ldrb	r3, [r3, #2]
 80009ce:	085b      	lsrs	r3, r3, #1
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	461a      	mov	r2, r3
 80009da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009de:	4872      	ldr	r0, [pc, #456]	; (8000ba8 <updateLEDMatrix+0x4e0>)
 80009e0:	f001 f878 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, ((matrix_buffer[2] >> 2)&1));
 80009e4:	4b6f      	ldr	r3, [pc, #444]	; (8000ba4 <updateLEDMatrix+0x4dc>)
 80009e6:	789b      	ldrb	r3, [r3, #2]
 80009e8:	089b      	lsrs	r3, r3, #2
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	461a      	mov	r2, r3
 80009f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009f8:	486b      	ldr	r0, [pc, #428]	; (8000ba8 <updateLEDMatrix+0x4e0>)
 80009fa:	f001 f86b 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, ((matrix_buffer[2] >> 3)&1));
 80009fe:	4b69      	ldr	r3, [pc, #420]	; (8000ba4 <updateLEDMatrix+0x4dc>)
 8000a00:	789b      	ldrb	r3, [r3, #2]
 8000a02:	08db      	lsrs	r3, r3, #3
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a12:	4865      	ldr	r0, [pc, #404]	; (8000ba8 <updateLEDMatrix+0x4e0>)
 8000a14:	f001 f85e 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, ((matrix_buffer[2] >> 4)&1));
 8000a18:	4b62      	ldr	r3, [pc, #392]	; (8000ba4 <updateLEDMatrix+0x4dc>)
 8000a1a:	789b      	ldrb	r3, [r3, #2]
 8000a1c:	091b      	lsrs	r3, r3, #4
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	461a      	mov	r2, r3
 8000a28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a2c:	485e      	ldr	r0, [pc, #376]	; (8000ba8 <updateLEDMatrix+0x4e0>)
 8000a2e:	f001 f851 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, ((matrix_buffer[2] >> 5)&1));
 8000a32:	4b5c      	ldr	r3, [pc, #368]	; (8000ba4 <updateLEDMatrix+0x4dc>)
 8000a34:	789b      	ldrb	r3, [r3, #2]
 8000a36:	095b      	lsrs	r3, r3, #5
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	461a      	mov	r2, r3
 8000a42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a46:	4858      	ldr	r0, [pc, #352]	; (8000ba8 <updateLEDMatrix+0x4e0>)
 8000a48:	f001 f844 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, ((matrix_buffer[2] >> 6)&1));
 8000a4c:	4b55      	ldr	r3, [pc, #340]	; (8000ba4 <updateLEDMatrix+0x4dc>)
 8000a4e:	789b      	ldrb	r3, [r3, #2]
 8000a50:	099b      	lsrs	r3, r3, #6
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	f003 0301 	and.w	r3, r3, #1
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a60:	4851      	ldr	r0, [pc, #324]	; (8000ba8 <updateLEDMatrix+0x4e0>)
 8000a62:	f001 f837 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, ((matrix_buffer[2] >> 7)&1));
 8000a66:	4b4f      	ldr	r3, [pc, #316]	; (8000ba4 <updateLEDMatrix+0x4dc>)
 8000a68:	789b      	ldrb	r3, [r3, #2]
 8000a6a:	09db      	lsrs	r3, r3, #7
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	461a      	mov	r2, r3
 8000a70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a74:	484c      	ldr	r0, [pc, #304]	; (8000ba8 <updateLEDMatrix+0x4e0>)
 8000a76:	f001 f82d 	bl	8001ad4 <HAL_GPIO_WritePin>
			break;
 8000a7a:	e2e6      	b.n	800104a <updateLEDMatrix+0x982>
		case 3:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, 1);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	2104      	movs	r1, #4
 8000a80:	4847      	ldr	r0, [pc, #284]	; (8000ba0 <updateLEDMatrix+0x4d8>)
 8000a82:	f001 f827 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1);
 8000a86:	2201      	movs	r2, #1
 8000a88:	2108      	movs	r1, #8
 8000a8a:	4845      	ldr	r0, [pc, #276]	; (8000ba0 <updateLEDMatrix+0x4d8>)
 8000a8c:	f001 f822 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1);
 8000a90:	2201      	movs	r2, #1
 8000a92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a96:	4842      	ldr	r0, [pc, #264]	; (8000ba0 <updateLEDMatrix+0x4d8>)
 8000a98:	f001 f81c 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 0);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aa2:	483f      	ldr	r0, [pc, #252]	; (8000ba0 <updateLEDMatrix+0x4d8>)
 8000aa4:	f001 f816 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aae:	483c      	ldr	r0, [pc, #240]	; (8000ba0 <updateLEDMatrix+0x4d8>)
 8000ab0:	f001 f810 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aba:	4839      	ldr	r0, [pc, #228]	; (8000ba0 <updateLEDMatrix+0x4d8>)
 8000abc:	f001 f80a 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ac6:	4836      	ldr	r0, [pc, #216]	; (8000ba0 <updateLEDMatrix+0x4d8>)
 8000ac8:	f001 f804 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1);
 8000acc:	2201      	movs	r2, #1
 8000ace:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ad2:	4833      	ldr	r0, [pc, #204]	; (8000ba0 <updateLEDMatrix+0x4d8>)
 8000ad4:	f000 fffe 	bl	8001ad4 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, ((matrix_buffer[3] >> 0)&1));
 8000ad8:	4b32      	ldr	r3, [pc, #200]	; (8000ba4 <updateLEDMatrix+0x4dc>)
 8000ada:	78db      	ldrb	r3, [r3, #3]
 8000adc:	f003 0301 	and.w	r3, r3, #1
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ae8:	482f      	ldr	r0, [pc, #188]	; (8000ba8 <updateLEDMatrix+0x4e0>)
 8000aea:	f000 fff3 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, ((matrix_buffer[3] >> 1)&1));
 8000aee:	4b2d      	ldr	r3, [pc, #180]	; (8000ba4 <updateLEDMatrix+0x4dc>)
 8000af0:	78db      	ldrb	r3, [r3, #3]
 8000af2:	085b      	lsrs	r3, r3, #1
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	461a      	mov	r2, r3
 8000afe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b02:	4829      	ldr	r0, [pc, #164]	; (8000ba8 <updateLEDMatrix+0x4e0>)
 8000b04:	f000 ffe6 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, ((matrix_buffer[3] >> 2)&1));
 8000b08:	4b26      	ldr	r3, [pc, #152]	; (8000ba4 <updateLEDMatrix+0x4dc>)
 8000b0a:	78db      	ldrb	r3, [r3, #3]
 8000b0c:	089b      	lsrs	r3, r3, #2
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	f003 0301 	and.w	r3, r3, #1
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	461a      	mov	r2, r3
 8000b18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b1c:	4822      	ldr	r0, [pc, #136]	; (8000ba8 <updateLEDMatrix+0x4e0>)
 8000b1e:	f000 ffd9 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, ((matrix_buffer[3] >> 3)&1));
 8000b22:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <updateLEDMatrix+0x4dc>)
 8000b24:	78db      	ldrb	r3, [r3, #3]
 8000b26:	08db      	lsrs	r3, r3, #3
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	461a      	mov	r2, r3
 8000b32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b36:	481c      	ldr	r0, [pc, #112]	; (8000ba8 <updateLEDMatrix+0x4e0>)
 8000b38:	f000 ffcc 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, ((matrix_buffer[3] >> 4)&1));
 8000b3c:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <updateLEDMatrix+0x4dc>)
 8000b3e:	78db      	ldrb	r3, [r3, #3]
 8000b40:	091b      	lsrs	r3, r3, #4
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	f003 0301 	and.w	r3, r3, #1
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b50:	4815      	ldr	r0, [pc, #84]	; (8000ba8 <updateLEDMatrix+0x4e0>)
 8000b52:	f000 ffbf 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, ((matrix_buffer[3] >> 5)&1));
 8000b56:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <updateLEDMatrix+0x4dc>)
 8000b58:	78db      	ldrb	r3, [r3, #3]
 8000b5a:	095b      	lsrs	r3, r3, #5
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	461a      	mov	r2, r3
 8000b66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b6a:	480f      	ldr	r0, [pc, #60]	; (8000ba8 <updateLEDMatrix+0x4e0>)
 8000b6c:	f000 ffb2 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, ((matrix_buffer[3] >> 6)&1));
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <updateLEDMatrix+0x4dc>)
 8000b72:	78db      	ldrb	r3, [r3, #3]
 8000b74:	099b      	lsrs	r3, r3, #6
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	461a      	mov	r2, r3
 8000b80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b84:	4808      	ldr	r0, [pc, #32]	; (8000ba8 <updateLEDMatrix+0x4e0>)
 8000b86:	f000 ffa5 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, ((matrix_buffer[3] >> 7)&1));
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <updateLEDMatrix+0x4dc>)
 8000b8c:	78db      	ldrb	r3, [r3, #3]
 8000b8e:	09db      	lsrs	r3, r3, #7
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	461a      	mov	r2, r3
 8000b94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b98:	4803      	ldr	r0, [pc, #12]	; (8000ba8 <updateLEDMatrix+0x4e0>)
 8000b9a:	f000 ff9b 	bl	8001ad4 <HAL_GPIO_WritePin>
			break;
 8000b9e:	e254      	b.n	800104a <updateLEDMatrix+0x982>
 8000ba0:	40010800 	.word	0x40010800
 8000ba4:	20000020 	.word	0x20000020
 8000ba8:	40010c00 	.word	0x40010c00
		case 4:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, 1);
 8000bac:	2201      	movs	r2, #1
 8000bae:	2104      	movs	r1, #4
 8000bb0:	4890      	ldr	r0, [pc, #576]	; (8000df4 <updateLEDMatrix+0x72c>)
 8000bb2:	f000 ff8f 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1);
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	2108      	movs	r1, #8
 8000bba:	488e      	ldr	r0, [pc, #568]	; (8000df4 <updateLEDMatrix+0x72c>)
 8000bbc:	f000 ff8a 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bc6:	488b      	ldr	r0, [pc, #556]	; (8000df4 <updateLEDMatrix+0x72c>)
 8000bc8:	f000 ff84 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bd2:	4888      	ldr	r0, [pc, #544]	; (8000df4 <updateLEDMatrix+0x72c>)
 8000bd4:	f000 ff7e 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 0);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bde:	4885      	ldr	r0, [pc, #532]	; (8000df4 <updateLEDMatrix+0x72c>)
 8000be0:	f000 ff78 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1);
 8000be4:	2201      	movs	r2, #1
 8000be6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bea:	4882      	ldr	r0, [pc, #520]	; (8000df4 <updateLEDMatrix+0x72c>)
 8000bec:	f000 ff72 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bf6:	487f      	ldr	r0, [pc, #508]	; (8000df4 <updateLEDMatrix+0x72c>)
 8000bf8:	f000 ff6c 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c02:	487c      	ldr	r0, [pc, #496]	; (8000df4 <updateLEDMatrix+0x72c>)
 8000c04:	f000 ff66 	bl	8001ad4 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, ((matrix_buffer[4] >> 0)&1));
 8000c08:	4b7b      	ldr	r3, [pc, #492]	; (8000df8 <updateLEDMatrix+0x730>)
 8000c0a:	791b      	ldrb	r3, [r3, #4]
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	461a      	mov	r2, r3
 8000c14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c18:	4878      	ldr	r0, [pc, #480]	; (8000dfc <updateLEDMatrix+0x734>)
 8000c1a:	f000 ff5b 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, ((matrix_buffer[4] >> 1)&1));
 8000c1e:	4b76      	ldr	r3, [pc, #472]	; (8000df8 <updateLEDMatrix+0x730>)
 8000c20:	791b      	ldrb	r3, [r3, #4]
 8000c22:	085b      	lsrs	r3, r3, #1
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c32:	4872      	ldr	r0, [pc, #456]	; (8000dfc <updateLEDMatrix+0x734>)
 8000c34:	f000 ff4e 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, ((matrix_buffer[4] >> 2)&1));
 8000c38:	4b6f      	ldr	r3, [pc, #444]	; (8000df8 <updateLEDMatrix+0x730>)
 8000c3a:	791b      	ldrb	r3, [r3, #4]
 8000c3c:	089b      	lsrs	r3, r3, #2
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	f003 0301 	and.w	r3, r3, #1
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	461a      	mov	r2, r3
 8000c48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c4c:	486b      	ldr	r0, [pc, #428]	; (8000dfc <updateLEDMatrix+0x734>)
 8000c4e:	f000 ff41 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, ((matrix_buffer[4] >> 3)&1));
 8000c52:	4b69      	ldr	r3, [pc, #420]	; (8000df8 <updateLEDMatrix+0x730>)
 8000c54:	791b      	ldrb	r3, [r3, #4]
 8000c56:	08db      	lsrs	r3, r3, #3
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	461a      	mov	r2, r3
 8000c62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c66:	4865      	ldr	r0, [pc, #404]	; (8000dfc <updateLEDMatrix+0x734>)
 8000c68:	f000 ff34 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, ((matrix_buffer[4] >> 4)&1));
 8000c6c:	4b62      	ldr	r3, [pc, #392]	; (8000df8 <updateLEDMatrix+0x730>)
 8000c6e:	791b      	ldrb	r3, [r3, #4]
 8000c70:	091b      	lsrs	r3, r3, #4
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c80:	485e      	ldr	r0, [pc, #376]	; (8000dfc <updateLEDMatrix+0x734>)
 8000c82:	f000 ff27 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, ((matrix_buffer[4] >> 5)&1));
 8000c86:	4b5c      	ldr	r3, [pc, #368]	; (8000df8 <updateLEDMatrix+0x730>)
 8000c88:	791b      	ldrb	r3, [r3, #4]
 8000c8a:	095b      	lsrs	r3, r3, #5
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	461a      	mov	r2, r3
 8000c96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c9a:	4858      	ldr	r0, [pc, #352]	; (8000dfc <updateLEDMatrix+0x734>)
 8000c9c:	f000 ff1a 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, ((matrix_buffer[4] >> 6)&1));
 8000ca0:	4b55      	ldr	r3, [pc, #340]	; (8000df8 <updateLEDMatrix+0x730>)
 8000ca2:	791b      	ldrb	r3, [r3, #4]
 8000ca4:	099b      	lsrs	r3, r3, #6
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	f003 0301 	and.w	r3, r3, #1
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	461a      	mov	r2, r3
 8000cb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cb4:	4851      	ldr	r0, [pc, #324]	; (8000dfc <updateLEDMatrix+0x734>)
 8000cb6:	f000 ff0d 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, ((matrix_buffer[4] >> 7)&1));
 8000cba:	4b4f      	ldr	r3, [pc, #316]	; (8000df8 <updateLEDMatrix+0x730>)
 8000cbc:	791b      	ldrb	r3, [r3, #4]
 8000cbe:	09db      	lsrs	r3, r3, #7
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cc8:	484c      	ldr	r0, [pc, #304]	; (8000dfc <updateLEDMatrix+0x734>)
 8000cca:	f000 ff03 	bl	8001ad4 <HAL_GPIO_WritePin>
			break;
 8000cce:	e1bc      	b.n	800104a <updateLEDMatrix+0x982>
		case 5:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, 1);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	2104      	movs	r1, #4
 8000cd4:	4847      	ldr	r0, [pc, #284]	; (8000df4 <updateLEDMatrix+0x72c>)
 8000cd6:	f000 fefd 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1);
 8000cda:	2201      	movs	r2, #1
 8000cdc:	2108      	movs	r1, #8
 8000cde:	4845      	ldr	r0, [pc, #276]	; (8000df4 <updateLEDMatrix+0x72c>)
 8000ce0:	f000 fef8 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cea:	4842      	ldr	r0, [pc, #264]	; (8000df4 <updateLEDMatrix+0x72c>)
 8000cec:	f000 fef2 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1);
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cf6:	483f      	ldr	r0, [pc, #252]	; (8000df4 <updateLEDMatrix+0x72c>)
 8000cf8:	f000 feec 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1);
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d02:	483c      	ldr	r0, [pc, #240]	; (8000df4 <updateLEDMatrix+0x72c>)
 8000d04:	f000 fee6 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 0);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d0e:	4839      	ldr	r0, [pc, #228]	; (8000df4 <updateLEDMatrix+0x72c>)
 8000d10:	f000 fee0 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1);
 8000d14:	2201      	movs	r2, #1
 8000d16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d1a:	4836      	ldr	r0, [pc, #216]	; (8000df4 <updateLEDMatrix+0x72c>)
 8000d1c:	f000 feda 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1);
 8000d20:	2201      	movs	r2, #1
 8000d22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d26:	4833      	ldr	r0, [pc, #204]	; (8000df4 <updateLEDMatrix+0x72c>)
 8000d28:	f000 fed4 	bl	8001ad4 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, ((matrix_buffer[5] >> 0)&1));
 8000d2c:	4b32      	ldr	r3, [pc, #200]	; (8000df8 <updateLEDMatrix+0x730>)
 8000d2e:	795b      	ldrb	r3, [r3, #5]
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	461a      	mov	r2, r3
 8000d38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d3c:	482f      	ldr	r0, [pc, #188]	; (8000dfc <updateLEDMatrix+0x734>)
 8000d3e:	f000 fec9 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, ((matrix_buffer[5] >> 1)&1));
 8000d42:	4b2d      	ldr	r3, [pc, #180]	; (8000df8 <updateLEDMatrix+0x730>)
 8000d44:	795b      	ldrb	r3, [r3, #5]
 8000d46:	085b      	lsrs	r3, r3, #1
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	461a      	mov	r2, r3
 8000d52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d56:	4829      	ldr	r0, [pc, #164]	; (8000dfc <updateLEDMatrix+0x734>)
 8000d58:	f000 febc 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, ((matrix_buffer[5] >> 2)&1));
 8000d5c:	4b26      	ldr	r3, [pc, #152]	; (8000df8 <updateLEDMatrix+0x730>)
 8000d5e:	795b      	ldrb	r3, [r3, #5]
 8000d60:	089b      	lsrs	r3, r3, #2
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d70:	4822      	ldr	r0, [pc, #136]	; (8000dfc <updateLEDMatrix+0x734>)
 8000d72:	f000 feaf 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, ((matrix_buffer[5] >> 3)&1));
 8000d76:	4b20      	ldr	r3, [pc, #128]	; (8000df8 <updateLEDMatrix+0x730>)
 8000d78:	795b      	ldrb	r3, [r3, #5]
 8000d7a:	08db      	lsrs	r3, r3, #3
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	461a      	mov	r2, r3
 8000d86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d8a:	481c      	ldr	r0, [pc, #112]	; (8000dfc <updateLEDMatrix+0x734>)
 8000d8c:	f000 fea2 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, ((matrix_buffer[5] >> 4)&1));
 8000d90:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <updateLEDMatrix+0x730>)
 8000d92:	795b      	ldrb	r3, [r3, #5]
 8000d94:	091b      	lsrs	r3, r3, #4
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	461a      	mov	r2, r3
 8000da0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000da4:	4815      	ldr	r0, [pc, #84]	; (8000dfc <updateLEDMatrix+0x734>)
 8000da6:	f000 fe95 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, ((matrix_buffer[5] >> 5)&1));
 8000daa:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <updateLEDMatrix+0x730>)
 8000dac:	795b      	ldrb	r3, [r3, #5]
 8000dae:	095b      	lsrs	r3, r3, #5
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	461a      	mov	r2, r3
 8000dba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dbe:	480f      	ldr	r0, [pc, #60]	; (8000dfc <updateLEDMatrix+0x734>)
 8000dc0:	f000 fe88 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, ((matrix_buffer[5] >> 6)&1));
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <updateLEDMatrix+0x730>)
 8000dc6:	795b      	ldrb	r3, [r3, #5]
 8000dc8:	099b      	lsrs	r3, r3, #6
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	f003 0301 	and.w	r3, r3, #1
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dd8:	4808      	ldr	r0, [pc, #32]	; (8000dfc <updateLEDMatrix+0x734>)
 8000dda:	f000 fe7b 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, ((matrix_buffer[5] >> 7)&1));
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <updateLEDMatrix+0x730>)
 8000de0:	795b      	ldrb	r3, [r3, #5]
 8000de2:	09db      	lsrs	r3, r3, #7
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	461a      	mov	r2, r3
 8000de8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dec:	4803      	ldr	r0, [pc, #12]	; (8000dfc <updateLEDMatrix+0x734>)
 8000dee:	f000 fe71 	bl	8001ad4 <HAL_GPIO_WritePin>
			break;
 8000df2:	e12a      	b.n	800104a <updateLEDMatrix+0x982>
 8000df4:	40010800 	.word	0x40010800
 8000df8:	20000020 	.word	0x20000020
 8000dfc:	40010c00 	.word	0x40010c00
		case 6:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, 1);
 8000e00:	2201      	movs	r2, #1
 8000e02:	2104      	movs	r1, #4
 8000e04:	4893      	ldr	r0, [pc, #588]	; (8001054 <updateLEDMatrix+0x98c>)
 8000e06:	f000 fe65 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	2108      	movs	r1, #8
 8000e0e:	4891      	ldr	r0, [pc, #580]	; (8001054 <updateLEDMatrix+0x98c>)
 8000e10:	f000 fe60 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1);
 8000e14:	2201      	movs	r2, #1
 8000e16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e1a:	488e      	ldr	r0, [pc, #568]	; (8001054 <updateLEDMatrix+0x98c>)
 8000e1c:	f000 fe5a 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1);
 8000e20:	2201      	movs	r2, #1
 8000e22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e26:	488b      	ldr	r0, [pc, #556]	; (8001054 <updateLEDMatrix+0x98c>)
 8000e28:	f000 fe54 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e32:	4888      	ldr	r0, [pc, #544]	; (8001054 <updateLEDMatrix+0x98c>)
 8000e34:	f000 fe4e 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e3e:	4885      	ldr	r0, [pc, #532]	; (8001054 <updateLEDMatrix+0x98c>)
 8000e40:	f000 fe48 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 0);
 8000e44:	2200      	movs	r2, #0
 8000e46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e4a:	4882      	ldr	r0, [pc, #520]	; (8001054 <updateLEDMatrix+0x98c>)
 8000e4c:	f000 fe42 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1);
 8000e50:	2201      	movs	r2, #1
 8000e52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e56:	487f      	ldr	r0, [pc, #508]	; (8001054 <updateLEDMatrix+0x98c>)
 8000e58:	f000 fe3c 	bl	8001ad4 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, ((matrix_buffer[6] >> 0)&1));
 8000e5c:	4b7e      	ldr	r3, [pc, #504]	; (8001058 <updateLEDMatrix+0x990>)
 8000e5e:	799b      	ldrb	r3, [r3, #6]
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	461a      	mov	r2, r3
 8000e68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e6c:	487b      	ldr	r0, [pc, #492]	; (800105c <updateLEDMatrix+0x994>)
 8000e6e:	f000 fe31 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, ((matrix_buffer[6] >> 1)&1));
 8000e72:	4b79      	ldr	r3, [pc, #484]	; (8001058 <updateLEDMatrix+0x990>)
 8000e74:	799b      	ldrb	r3, [r3, #6]
 8000e76:	085b      	lsrs	r3, r3, #1
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	461a      	mov	r2, r3
 8000e82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e86:	4875      	ldr	r0, [pc, #468]	; (800105c <updateLEDMatrix+0x994>)
 8000e88:	f000 fe24 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, ((matrix_buffer[6] >> 2)&1));
 8000e8c:	4b72      	ldr	r3, [pc, #456]	; (8001058 <updateLEDMatrix+0x990>)
 8000e8e:	799b      	ldrb	r3, [r3, #6]
 8000e90:	089b      	lsrs	r3, r3, #2
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ea0:	486e      	ldr	r0, [pc, #440]	; (800105c <updateLEDMatrix+0x994>)
 8000ea2:	f000 fe17 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, ((matrix_buffer[6] >> 3)&1));
 8000ea6:	4b6c      	ldr	r3, [pc, #432]	; (8001058 <updateLEDMatrix+0x990>)
 8000ea8:	799b      	ldrb	r3, [r3, #6]
 8000eaa:	08db      	lsrs	r3, r3, #3
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eba:	4868      	ldr	r0, [pc, #416]	; (800105c <updateLEDMatrix+0x994>)
 8000ebc:	f000 fe0a 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, ((matrix_buffer[6] >> 4)&1));
 8000ec0:	4b65      	ldr	r3, [pc, #404]	; (8001058 <updateLEDMatrix+0x990>)
 8000ec2:	799b      	ldrb	r3, [r3, #6]
 8000ec4:	091b      	lsrs	r3, r3, #4
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	461a      	mov	r2, r3
 8000ed0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ed4:	4861      	ldr	r0, [pc, #388]	; (800105c <updateLEDMatrix+0x994>)
 8000ed6:	f000 fdfd 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, ((matrix_buffer[6] >> 5)&1));
 8000eda:	4b5f      	ldr	r3, [pc, #380]	; (8001058 <updateLEDMatrix+0x990>)
 8000edc:	799b      	ldrb	r3, [r3, #6]
 8000ede:	095b      	lsrs	r3, r3, #5
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	461a      	mov	r2, r3
 8000eea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eee:	485b      	ldr	r0, [pc, #364]	; (800105c <updateLEDMatrix+0x994>)
 8000ef0:	f000 fdf0 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, ((matrix_buffer[6] >> 6)&1));
 8000ef4:	4b58      	ldr	r3, [pc, #352]	; (8001058 <updateLEDMatrix+0x990>)
 8000ef6:	799b      	ldrb	r3, [r3, #6]
 8000ef8:	099b      	lsrs	r3, r3, #6
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	461a      	mov	r2, r3
 8000f04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f08:	4854      	ldr	r0, [pc, #336]	; (800105c <updateLEDMatrix+0x994>)
 8000f0a:	f000 fde3 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, ((matrix_buffer[6] >> 7)&1));
 8000f0e:	4b52      	ldr	r3, [pc, #328]	; (8001058 <updateLEDMatrix+0x990>)
 8000f10:	799b      	ldrb	r3, [r3, #6]
 8000f12:	09db      	lsrs	r3, r3, #7
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	461a      	mov	r2, r3
 8000f18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f1c:	484f      	ldr	r0, [pc, #316]	; (800105c <updateLEDMatrix+0x994>)
 8000f1e:	f000 fdd9 	bl	8001ad4 <HAL_GPIO_WritePin>
			break;
 8000f22:	e092      	b.n	800104a <updateLEDMatrix+0x982>
		case 7:
			HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, 1);
 8000f24:	2201      	movs	r2, #1
 8000f26:	2104      	movs	r1, #4
 8000f28:	484a      	ldr	r0, [pc, #296]	; (8001054 <updateLEDMatrix+0x98c>)
 8000f2a:	f000 fdd3 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1);
 8000f2e:	2201      	movs	r2, #1
 8000f30:	2108      	movs	r1, #8
 8000f32:	4848      	ldr	r0, [pc, #288]	; (8001054 <updateLEDMatrix+0x98c>)
 8000f34:	f000 fdce 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f3e:	4845      	ldr	r0, [pc, #276]	; (8001054 <updateLEDMatrix+0x98c>)
 8000f40:	f000 fdc8 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1);
 8000f44:	2201      	movs	r2, #1
 8000f46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f4a:	4842      	ldr	r0, [pc, #264]	; (8001054 <updateLEDMatrix+0x98c>)
 8000f4c:	f000 fdc2 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1);
 8000f50:	2201      	movs	r2, #1
 8000f52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f56:	483f      	ldr	r0, [pc, #252]	; (8001054 <updateLEDMatrix+0x98c>)
 8000f58:	f000 fdbc 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f62:	483c      	ldr	r0, [pc, #240]	; (8001054 <updateLEDMatrix+0x98c>)
 8000f64:	f000 fdb6 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f6e:	4839      	ldr	r0, [pc, #228]	; (8001054 <updateLEDMatrix+0x98c>)
 8000f70:	f000 fdb0 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 0);
 8000f74:	2200      	movs	r2, #0
 8000f76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f7a:	4836      	ldr	r0, [pc, #216]	; (8001054 <updateLEDMatrix+0x98c>)
 8000f7c:	f000 fdaa 	bl	8001ad4 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, ((matrix_buffer[7] >> 0)&1));
 8000f80:	4b35      	ldr	r3, [pc, #212]	; (8001058 <updateLEDMatrix+0x990>)
 8000f82:	79db      	ldrb	r3, [r3, #7]
 8000f84:	f003 0301 	and.w	r3, r3, #1
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f90:	4832      	ldr	r0, [pc, #200]	; (800105c <updateLEDMatrix+0x994>)
 8000f92:	f000 fd9f 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, ((matrix_buffer[7] >> 1)&1));
 8000f96:	4b30      	ldr	r3, [pc, #192]	; (8001058 <updateLEDMatrix+0x990>)
 8000f98:	79db      	ldrb	r3, [r3, #7]
 8000f9a:	085b      	lsrs	r3, r3, #1
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000faa:	482c      	ldr	r0, [pc, #176]	; (800105c <updateLEDMatrix+0x994>)
 8000fac:	f000 fd92 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, ((matrix_buffer[7] >> 2)&1));
 8000fb0:	4b29      	ldr	r3, [pc, #164]	; (8001058 <updateLEDMatrix+0x990>)
 8000fb2:	79db      	ldrb	r3, [r3, #7]
 8000fb4:	089b      	lsrs	r3, r3, #2
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fc4:	4825      	ldr	r0, [pc, #148]	; (800105c <updateLEDMatrix+0x994>)
 8000fc6:	f000 fd85 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, ((matrix_buffer[7] >> 3)&1));
 8000fca:	4b23      	ldr	r3, [pc, #140]	; (8001058 <updateLEDMatrix+0x990>)
 8000fcc:	79db      	ldrb	r3, [r3, #7]
 8000fce:	08db      	lsrs	r3, r3, #3
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	461a      	mov	r2, r3
 8000fda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fde:	481f      	ldr	r0, [pc, #124]	; (800105c <updateLEDMatrix+0x994>)
 8000fe0:	f000 fd78 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, ((matrix_buffer[7] >> 4)&1));
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <updateLEDMatrix+0x990>)
 8000fe6:	79db      	ldrb	r3, [r3, #7]
 8000fe8:	091b      	lsrs	r3, r3, #4
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ff8:	4818      	ldr	r0, [pc, #96]	; (800105c <updateLEDMatrix+0x994>)
 8000ffa:	f000 fd6b 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, ((matrix_buffer[7] >> 5)&1));
 8000ffe:	4b16      	ldr	r3, [pc, #88]	; (8001058 <updateLEDMatrix+0x990>)
 8001000:	79db      	ldrb	r3, [r3, #7]
 8001002:	095b      	lsrs	r3, r3, #5
 8001004:	b2db      	uxtb	r3, r3
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	b2db      	uxtb	r3, r3
 800100c:	461a      	mov	r2, r3
 800100e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001012:	4812      	ldr	r0, [pc, #72]	; (800105c <updateLEDMatrix+0x994>)
 8001014:	f000 fd5e 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, ((matrix_buffer[7] >> 6)&1));
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <updateLEDMatrix+0x990>)
 800101a:	79db      	ldrb	r3, [r3, #7]
 800101c:	099b      	lsrs	r3, r3, #6
 800101e:	b2db      	uxtb	r3, r3
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	b2db      	uxtb	r3, r3
 8001026:	461a      	mov	r2, r3
 8001028:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800102c:	480b      	ldr	r0, [pc, #44]	; (800105c <updateLEDMatrix+0x994>)
 800102e:	f000 fd51 	bl	8001ad4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, ((matrix_buffer[7] >> 7)&1));
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <updateLEDMatrix+0x990>)
 8001034:	79db      	ldrb	r3, [r3, #7]
 8001036:	09db      	lsrs	r3, r3, #7
 8001038:	b2db      	uxtb	r3, r3
 800103a:	461a      	mov	r2, r3
 800103c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001040:	4806      	ldr	r0, [pc, #24]	; (800105c <updateLEDMatrix+0x994>)
 8001042:	f000 fd47 	bl	8001ad4 <HAL_GPIO_WritePin>
			break;
 8001046:	e000      	b.n	800104a <updateLEDMatrix+0x982>
		default:
			break;
 8001048:	bf00      	nop
	}
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40010800 	.word	0x40010800
 8001058:	20000020 	.word	0x20000020
 800105c:	40010c00 	.word	0x40010c00

08001060 <updateLEDMatrixBuffer>:

void updateLEDMatrixBuffer(char index)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
	switch(index)
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	2b41      	cmp	r3, #65	; 0x41
 800106e:	d118      	bne.n	80010a2 <updateLEDMatrixBuffer+0x42>
	{
	case 'A':
		matrix_buffer [0] = 0xFF;
 8001070:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <updateLEDMatrixBuffer+0x50>)
 8001072:	22ff      	movs	r2, #255	; 0xff
 8001074:	701a      	strb	r2, [r3, #0]
		matrix_buffer [1] = 0x01;
 8001076:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <updateLEDMatrixBuffer+0x50>)
 8001078:	2201      	movs	r2, #1
 800107a:	705a      	strb	r2, [r3, #1]
		matrix_buffer [2] = 0x00;
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <updateLEDMatrixBuffer+0x50>)
 800107e:	2200      	movs	r2, #0
 8001080:	709a      	strb	r2, [r3, #2]
		matrix_buffer [3] = 0xCC;
 8001082:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <updateLEDMatrixBuffer+0x50>)
 8001084:	22cc      	movs	r2, #204	; 0xcc
 8001086:	70da      	strb	r2, [r3, #3]
		matrix_buffer [4] = 0xCC;
 8001088:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <updateLEDMatrixBuffer+0x50>)
 800108a:	22cc      	movs	r2, #204	; 0xcc
 800108c:	711a      	strb	r2, [r3, #4]
		matrix_buffer [5] = 0x00;
 800108e:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <updateLEDMatrixBuffer+0x50>)
 8001090:	2200      	movs	r2, #0
 8001092:	715a      	strb	r2, [r3, #5]
		matrix_buffer [6] = 0x01;
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <updateLEDMatrixBuffer+0x50>)
 8001096:	2201      	movs	r2, #1
 8001098:	719a      	strb	r2, [r3, #6]
		matrix_buffer [7] = 0xFF;
 800109a:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <updateLEDMatrixBuffer+0x50>)
 800109c:	22ff      	movs	r2, #255	; 0xff
 800109e:	71da      	strb	r2, [r3, #7]
		break;
 80010a0:	e000      	b.n	80010a4 <updateLEDMatrixBuffer+0x44>

	default:
		break;
 80010a2:	bf00      	nop
	}
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	20000020 	.word	0x20000020

080010b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b8:	f000 fa20 	bl	80014fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010bc:	f000 f88c 	bl	80011d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010c0:	f000 f912 	bl	80012e8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80010c4:	f000 f8c4 	bl	8001250 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80010c8:	4839      	ldr	r0, [pc, #228]	; (80011b0 <main+0xfc>)
 80010ca:	f001 f96d 	bl	80023a8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  timer0_flag = 1;
 80010ce:	4b39      	ldr	r3, [pc, #228]	; (80011b4 <main+0x100>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	601a      	str	r2, [r3, #0]
  timer1_flag = 1;
 80010d4:	4b38      	ldr	r3, [pc, #224]	; (80011b8 <main+0x104>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	601a      	str	r2, [r3, #0]
  timer2_flag = 1;
 80010da:	4b38      	ldr	r3, [pc, #224]	; (80011bc <main+0x108>)
 80010dc:	2201      	movs	r2, #1
 80010de:	601a      	str	r2, [r3, #0]

  while (1)
  {
	  if(timer2_flag == 1)
 80010e0:	4b36      	ldr	r3, [pc, #216]	; (80011bc <main+0x108>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d10d      	bne.n	8001104 <main+0x50>
	  {
		  setTimer2(10);
 80010e8:	200a      	movs	r0, #10
 80010ea:	f7ff f863 	bl	80001b4 <setTimer2>
		  updateLEDMatrixBuffer('A');
 80010ee:	2041      	movs	r0, #65	; 0x41
 80010f0:	f7ff ffb6 	bl	8001060 <updateLEDMatrixBuffer>
		  updateLEDMatrix(index_led_matrix ++);
 80010f4:	4b32      	ldr	r3, [pc, #200]	; (80011c0 <main+0x10c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	1c5a      	adds	r2, r3, #1
 80010fa:	4931      	ldr	r1, [pc, #196]	; (80011c0 <main+0x10c>)
 80010fc:	600a      	str	r2, [r1, #0]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fae2 	bl	80006c8 <updateLEDMatrix>
	  }

	  if(timer1_flag == 1)
 8001104:	4b2c      	ldr	r3, [pc, #176]	; (80011b8 <main+0x104>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d127      	bne.n	800115c <main+0xa8>
	  {
		  setTimer1(1000);
 800110c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001110:	f7ff f836 	bl	8000180 <setTimer1>
		  second++;
 8001114:	4b2b      	ldr	r3, [pc, #172]	; (80011c4 <main+0x110>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	3301      	adds	r3, #1
 800111a:	4a2a      	ldr	r2, [pc, #168]	; (80011c4 <main+0x110>)
 800111c:	6013      	str	r3, [r2, #0]

		  if(second >= 60)
 800111e:	4b29      	ldr	r3, [pc, #164]	; (80011c4 <main+0x110>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2b3b      	cmp	r3, #59	; 0x3b
 8001124:	dd07      	ble.n	8001136 <main+0x82>
		  {
			  second = 0;
 8001126:	4b27      	ldr	r3, [pc, #156]	; (80011c4 <main+0x110>)
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
			  minute++;
 800112c:	4b26      	ldr	r3, [pc, #152]	; (80011c8 <main+0x114>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	3301      	adds	r3, #1
 8001132:	4a25      	ldr	r2, [pc, #148]	; (80011c8 <main+0x114>)
 8001134:	6013      	str	r3, [r2, #0]
		  }
		  if(minute >= 60)
 8001136:	4b24      	ldr	r3, [pc, #144]	; (80011c8 <main+0x114>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b3b      	cmp	r3, #59	; 0x3b
 800113c:	dd07      	ble.n	800114e <main+0x9a>
		  {
			  minute = 0;
 800113e:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <main+0x114>)
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
			  hour++;
 8001144:	4b21      	ldr	r3, [pc, #132]	; (80011cc <main+0x118>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	3301      	adds	r3, #1
 800114a:	4a20      	ldr	r2, [pc, #128]	; (80011cc <main+0x118>)
 800114c:	6013      	str	r3, [r2, #0]
		  }
		  if(hour >= 24)
 800114e:	4b1f      	ldr	r3, [pc, #124]	; (80011cc <main+0x118>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2b17      	cmp	r3, #23
 8001154:	dd02      	ble.n	800115c <main+0xa8>
			  hour = 0;
 8001156:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <main+0x118>)
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
	  }

	  if(timer0_flag == 1)
 800115c:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <main+0x100>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d115      	bne.n	8001190 <main+0xdc>
	  {
		  setTimer0(500);
 8001164:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001168:	f7fe fff0 	bl	800014c <setTimer0>
		  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800116c:	2120      	movs	r1, #32
 800116e:	4818      	ldr	r0, [pc, #96]	; (80011d0 <main+0x11c>)
 8001170:	f000 fcc8 	bl	8001b04 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(DOT_GPIO_Port, DOT_Pin);
 8001174:	2110      	movs	r1, #16
 8001176:	4816      	ldr	r0, [pc, #88]	; (80011d0 <main+0x11c>)
 8001178:	f000 fcc4 	bl	8001b04 <HAL_GPIO_TogglePin>

		  updateClockBuffer ();
 800117c:	f7ff fa64 	bl	8000648 <updateClockBuffer>
		  update7SEG(index_led++);
 8001180:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <main+0x120>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	1c5a      	adds	r2, r3, #1
 8001186:	4913      	ldr	r1, [pc, #76]	; (80011d4 <main+0x120>)
 8001188:	600a      	str	r2, [r1, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f9f4 	bl	8000578 <update7SEG>
	  }

	  if(index_led == 4)
 8001190:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <main+0x120>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b04      	cmp	r3, #4
 8001196:	d102      	bne.n	800119e <main+0xea>
		  index_led = 0;
 8001198:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <main+0x120>)
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]

	  if(index_led_matrix == 8)
 800119e:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <main+0x10c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b08      	cmp	r3, #8
 80011a4:	d19c      	bne.n	80010e0 <main+0x2c>
		  index_led_matrix = 0;
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <main+0x10c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
	  if(timer2_flag == 1)
 80011ac:	e798      	b.n	80010e0 <main+0x2c>
 80011ae:	bf00      	nop
 80011b0:	20000068 	.word	0x20000068
 80011b4:	20000054 	.word	0x20000054
 80011b8:	2000005c 	.word	0x2000005c
 80011bc:	20000064 	.word	0x20000064
 80011c0:	200000b4 	.word	0x200000b4
 80011c4:	2000001c 	.word	0x2000001c
 80011c8:	20000018 	.word	0x20000018
 80011cc:	20000014 	.word	0x20000014
 80011d0:	40010800 	.word	0x40010800
 80011d4:	200000b0 	.word	0x200000b0

080011d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b090      	sub	sp, #64	; 0x40
 80011dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011de:	f107 0318 	add.w	r3, r7, #24
 80011e2:	2228      	movs	r2, #40	; 0x28
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f001 fc96 	bl	8002b18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
 80011f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011fa:	2302      	movs	r3, #2
 80011fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011fe:	2301      	movs	r3, #1
 8001200:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001202:	2310      	movs	r3, #16
 8001204:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001206:	2300      	movs	r3, #0
 8001208:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800120a:	f107 0318 	add.w	r3, r7, #24
 800120e:	4618      	mov	r0, r3
 8001210:	f000 fc92 	bl	8001b38 <HAL_RCC_OscConfig>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800121a:	f000 f8c5 	bl	80013a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800121e:	230f      	movs	r3, #15
 8001220:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f000 ff00 	bl	800203c <HAL_RCC_ClockConfig>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001242:	f000 f8b1 	bl	80013a8 <Error_Handler>
  }
}
 8001246:	bf00      	nop
 8001248:	3740      	adds	r7, #64	; 0x40
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001256:	f107 0308 	add.w	r3, r7, #8
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001264:	463b      	mov	r3, r7
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800126c:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <MX_TIM2_Init+0x94>)
 800126e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001272:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001274:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <MX_TIM2_Init+0x94>)
 8001276:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800127a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127c:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <MX_TIM2_Init+0x94>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8001282:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <MX_TIM2_Init+0x94>)
 8001284:	220a      	movs	r2, #10
 8001286:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001288:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <MX_TIM2_Init+0x94>)
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <MX_TIM2_Init+0x94>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001294:	4813      	ldr	r0, [pc, #76]	; (80012e4 <MX_TIM2_Init+0x94>)
 8001296:	f001 f837 	bl	8002308 <HAL_TIM_Base_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012a0:	f000 f882 	bl	80013a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012aa:	f107 0308 	add.w	r3, r7, #8
 80012ae:	4619      	mov	r1, r3
 80012b0:	480c      	ldr	r0, [pc, #48]	; (80012e4 <MX_TIM2_Init+0x94>)
 80012b2:	f001 f9cd 	bl	8002650 <HAL_TIM_ConfigClockSource>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012bc:	f000 f874 	bl	80013a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c0:	2300      	movs	r3, #0
 80012c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012c8:	463b      	mov	r3, r7
 80012ca:	4619      	mov	r1, r3
 80012cc:	4805      	ldr	r0, [pc, #20]	; (80012e4 <MX_TIM2_Init+0x94>)
 80012ce:	f001 fb95 	bl	80029fc <HAL_TIMEx_MasterConfigSynchronization>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012d8:	f000 f866 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012dc:	bf00      	nop
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000068 	.word	0x20000068

080012e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ee:	f107 0308 	add.w	r3, r7, #8
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fc:	4b22      	ldr	r3, [pc, #136]	; (8001388 <MX_GPIO_Init+0xa0>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	4a21      	ldr	r2, [pc, #132]	; (8001388 <MX_GPIO_Init+0xa0>)
 8001302:	f043 0304 	orr.w	r3, r3, #4
 8001306:	6193      	str	r3, [r2, #24]
 8001308:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <MX_GPIO_Init+0xa0>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	f003 0304 	and.w	r3, r3, #4
 8001310:	607b      	str	r3, [r7, #4]
 8001312:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001314:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <MX_GPIO_Init+0xa0>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	4a1b      	ldr	r2, [pc, #108]	; (8001388 <MX_GPIO_Init+0xa0>)
 800131a:	f043 0308 	orr.w	r3, r3, #8
 800131e:	6193      	str	r3, [r2, #24]
 8001320:	4b19      	ldr	r3, [pc, #100]	; (8001388 <MX_GPIO_Init+0xa0>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	f003 0308 	and.w	r3, r3, #8
 8001328:	603b      	str	r3, [r7, #0]
 800132a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENM0_Pin|ENM1_Pin|DOT_Pin|LED_RED_Pin
 800132c:	2200      	movs	r2, #0
 800132e:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 8001332:	4816      	ldr	r0, [pc, #88]	; (800138c <MX_GPIO_Init+0xa4>)
 8001334:	f000 fbce 	bl	8001ad4 <HAL_GPIO_WritePin>
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_Pin|B_Pin|C_Pin|ROW2_Pin
 8001338:	2200      	movs	r2, #0
 800133a:	f64f 717f 	movw	r1, #65407	; 0xff7f
 800133e:	4814      	ldr	r0, [pc, #80]	; (8001390 <MX_GPIO_Init+0xa8>)
 8001340:	f000 fbc8 	bl	8001ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENM0_Pin ENM1_Pin DOT_Pin LED_RED_Pin
                           EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           ENM2_Pin ENM3_Pin ENM4_Pin ENM5_Pin
                           ENM6_Pin ENM7_Pin */
  GPIO_InitStruct.Pin = ENM0_Pin|ENM1_Pin|DOT_Pin|LED_RED_Pin
 8001344:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8001348:	60bb      	str	r3, [r7, #8]
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134a:	2301      	movs	r3, #1
 800134c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2302      	movs	r3, #2
 8001354:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001356:	f107 0308 	add.w	r3, r7, #8
 800135a:	4619      	mov	r1, r3
 800135c:	480b      	ldr	r0, [pc, #44]	; (800138c <MX_GPIO_Init+0xa4>)
 800135e:	f000 fa3d 	bl	80017dc <HAL_GPIO_Init>

  /*Configure GPIO pins : A_Pin B_Pin C_Pin ROW2_Pin
                           ROW3_Pin ROW4_Pin ROW5_Pin ROW6_Pin
                           ROW7_Pin D_Pin E_Pin F_Pin
                           G_Pin ROW0_Pin ROW1_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|ROW2_Pin
 8001362:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8001366:	60bb      	str	r3, [r7, #8]
                          |ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin
                          |ROW7_Pin|D_Pin|E_Pin|F_Pin
                          |G_Pin|ROW0_Pin|ROW1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001368:	2301      	movs	r3, #1
 800136a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	2302      	movs	r3, #2
 8001372:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001374:	f107 0308 	add.w	r3, r7, #8
 8001378:	4619      	mov	r1, r3
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <MX_GPIO_Init+0xa8>)
 800137c:	f000 fa2e 	bl	80017dc <HAL_GPIO_Init>

}
 8001380:	bf00      	nop
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40021000 	.word	0x40021000
 800138c:	40010800 	.word	0x40010800
 8001390:	40010c00 	.word	0x40010c00

08001394 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim )
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	timer_run ();
 800139c:	f7fe ff24 	bl	80001e8 <timer_run>
}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ac:	b672      	cpsid	i
}
 80013ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <Error_Handler+0x8>
	...

080013b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <HAL_MspInit+0x40>)
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	4a0d      	ldr	r2, [pc, #52]	; (80013f4 <HAL_MspInit+0x40>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6193      	str	r3, [r2, #24]
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <HAL_MspInit+0x40>)
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d2:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <HAL_MspInit+0x40>)
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	4a07      	ldr	r2, [pc, #28]	; (80013f4 <HAL_MspInit+0x40>)
 80013d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013dc:	61d3      	str	r3, [r2, #28]
 80013de:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <HAL_MspInit+0x40>)
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr
 80013f4:	40021000 	.word	0x40021000

080013f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001408:	d113      	bne.n	8001432 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800140a:	4b0c      	ldr	r3, [pc, #48]	; (800143c <HAL_TIM_Base_MspInit+0x44>)
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	4a0b      	ldr	r2, [pc, #44]	; (800143c <HAL_TIM_Base_MspInit+0x44>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	61d3      	str	r3, [r2, #28]
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <HAL_TIM_Base_MspInit+0x44>)
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	2100      	movs	r1, #0
 8001426:	201c      	movs	r0, #28
 8001428:	f000 f9a1 	bl	800176e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800142c:	201c      	movs	r0, #28
 800142e:	f000 f9ba 	bl	80017a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001432:	bf00      	nop
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40021000 	.word	0x40021000

08001440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001444:	e7fe      	b.n	8001444 <NMI_Handler+0x4>

08001446 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800144a:	e7fe      	b.n	800144a <HardFault_Handler+0x4>

0800144c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001450:	e7fe      	b.n	8001450 <MemManage_Handler+0x4>

08001452 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001456:	e7fe      	b.n	8001456 <BusFault_Handler+0x4>

08001458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800145c:	e7fe      	b.n	800145c <UsageFault_Handler+0x4>

0800145e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr

0800146a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr

08001476 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr

08001482 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001486:	f000 f87f 	bl	8001588 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001494:	4802      	ldr	r0, [pc, #8]	; (80014a0 <TIM2_IRQHandler+0x10>)
 8001496:	f000 ffd3 	bl	8002440 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000068 	.word	0x20000068

080014a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr

080014b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014b0:	480c      	ldr	r0, [pc, #48]	; (80014e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014b2:	490d      	ldr	r1, [pc, #52]	; (80014e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014b4:	4a0d      	ldr	r2, [pc, #52]	; (80014ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b8:	e002      	b.n	80014c0 <LoopCopyDataInit>

080014ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014be:	3304      	adds	r3, #4

080014c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c4:	d3f9      	bcc.n	80014ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014c6:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014c8:	4c0a      	ldr	r4, [pc, #40]	; (80014f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014cc:	e001      	b.n	80014d2 <LoopFillZerobss>

080014ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d0:	3204      	adds	r2, #4

080014d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d4:	d3fb      	bcc.n	80014ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014d6:	f7ff ffe5 	bl	80014a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014da:	f001 faf9 	bl	8002ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014de:	f7ff fde9 	bl	80010b4 <main>
  bx lr
 80014e2:	4770      	bx	lr
  ldr r0, =_sdata
 80014e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e8:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 80014ec:	08002b68 	.word	0x08002b68
  ldr r2, =_sbss
 80014f0:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 80014f4:	200000bc 	.word	0x200000bc

080014f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014f8:	e7fe      	b.n	80014f8 <ADC1_2_IRQHandler>
	...

080014fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <HAL_Init+0x28>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a07      	ldr	r2, [pc, #28]	; (8001524 <HAL_Init+0x28>)
 8001506:	f043 0310 	orr.w	r3, r3, #16
 800150a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800150c:	2003      	movs	r0, #3
 800150e:	f000 f923 	bl	8001758 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001512:	200f      	movs	r0, #15
 8001514:	f000 f808 	bl	8001528 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001518:	f7ff ff4c 	bl	80013b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40022000 	.word	0x40022000

08001528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_InitTick+0x54>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <HAL_InitTick+0x58>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	4619      	mov	r1, r3
 800153a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001542:	fbb2 f3f3 	udiv	r3, r2, r3
 8001546:	4618      	mov	r0, r3
 8001548:	f000 f93b 	bl	80017c2 <HAL_SYSTICK_Config>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e00e      	b.n	8001574 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b0f      	cmp	r3, #15
 800155a:	d80a      	bhi.n	8001572 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800155c:	2200      	movs	r2, #0
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	f04f 30ff 	mov.w	r0, #4294967295
 8001564:	f000 f903 	bl	800176e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001568:	4a06      	ldr	r2, [pc, #24]	; (8001584 <HAL_InitTick+0x5c>)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800156e:	2300      	movs	r3, #0
 8001570:	e000      	b.n	8001574 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
}
 8001574:	4618      	mov	r0, r3
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000028 	.word	0x20000028
 8001580:	20000030 	.word	0x20000030
 8001584:	2000002c 	.word	0x2000002c

08001588 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <HAL_IncTick+0x1c>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	461a      	mov	r2, r3
 8001592:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <HAL_IncTick+0x20>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4413      	add	r3, r2
 8001598:	4a03      	ldr	r2, [pc, #12]	; (80015a8 <HAL_IncTick+0x20>)
 800159a:	6013      	str	r3, [r2, #0]
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr
 80015a4:	20000030 	.word	0x20000030
 80015a8:	200000b8 	.word	0x200000b8

080015ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return uwTick;
 80015b0:	4b02      	ldr	r3, [pc, #8]	; (80015bc <HAL_GetTick+0x10>)
 80015b2:	681b      	ldr	r3, [r3, #0]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr
 80015bc:	200000b8 	.word	0x200000b8

080015c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <__NVIC_SetPriorityGrouping+0x44>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015dc:	4013      	ands	r3, r2
 80015de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015f2:	4a04      	ldr	r2, [pc, #16]	; (8001604 <__NVIC_SetPriorityGrouping+0x44>)
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	60d3      	str	r3, [r2, #12]
}
 80015f8:	bf00      	nop
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800160c:	4b04      	ldr	r3, [pc, #16]	; (8001620 <__NVIC_GetPriorityGrouping+0x18>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	0a1b      	lsrs	r3, r3, #8
 8001612:	f003 0307 	and.w	r3, r3, #7
}
 8001616:	4618      	mov	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	2b00      	cmp	r3, #0
 8001634:	db0b      	blt.n	800164e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	f003 021f 	and.w	r2, r3, #31
 800163c:	4906      	ldr	r1, [pc, #24]	; (8001658 <__NVIC_EnableIRQ+0x34>)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	095b      	lsrs	r3, r3, #5
 8001644:	2001      	movs	r0, #1
 8001646:	fa00 f202 	lsl.w	r2, r0, r2
 800164a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr
 8001658:	e000e100 	.word	0xe000e100

0800165c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	6039      	str	r1, [r7, #0]
 8001666:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166c:	2b00      	cmp	r3, #0
 800166e:	db0a      	blt.n	8001686 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	b2da      	uxtb	r2, r3
 8001674:	490c      	ldr	r1, [pc, #48]	; (80016a8 <__NVIC_SetPriority+0x4c>)
 8001676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167a:	0112      	lsls	r2, r2, #4
 800167c:	b2d2      	uxtb	r2, r2
 800167e:	440b      	add	r3, r1
 8001680:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001684:	e00a      	b.n	800169c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4908      	ldr	r1, [pc, #32]	; (80016ac <__NVIC_SetPriority+0x50>)
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	3b04      	subs	r3, #4
 8001694:	0112      	lsls	r2, r2, #4
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	440b      	add	r3, r1
 800169a:	761a      	strb	r2, [r3, #24]
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000e100 	.word	0xe000e100
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b089      	sub	sp, #36	; 0x24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f1c3 0307 	rsb	r3, r3, #7
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	bf28      	it	cs
 80016ce:	2304      	movcs	r3, #4
 80016d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	3304      	adds	r3, #4
 80016d6:	2b06      	cmp	r3, #6
 80016d8:	d902      	bls.n	80016e0 <NVIC_EncodePriority+0x30>
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3b03      	subs	r3, #3
 80016de:	e000      	b.n	80016e2 <NVIC_EncodePriority+0x32>
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e4:	f04f 32ff 	mov.w	r2, #4294967295
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43da      	mvns	r2, r3
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	401a      	ands	r2, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f8:	f04f 31ff 	mov.w	r1, #4294967295
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001702:	43d9      	mvns	r1, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	4313      	orrs	r3, r2
         );
}
 800170a:	4618      	mov	r0, r3
 800170c:	3724      	adds	r7, #36	; 0x24
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3b01      	subs	r3, #1
 8001720:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001724:	d301      	bcc.n	800172a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001726:	2301      	movs	r3, #1
 8001728:	e00f      	b.n	800174a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800172a:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <SysTick_Config+0x40>)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3b01      	subs	r3, #1
 8001730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001732:	210f      	movs	r1, #15
 8001734:	f04f 30ff 	mov.w	r0, #4294967295
 8001738:	f7ff ff90 	bl	800165c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <SysTick_Config+0x40>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001742:	4b04      	ldr	r3, [pc, #16]	; (8001754 <SysTick_Config+0x40>)
 8001744:	2207      	movs	r2, #7
 8001746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	e000e010 	.word	0xe000e010

08001758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff ff2d 	bl	80015c0 <__NVIC_SetPriorityGrouping>
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800176e:	b580      	push	{r7, lr}
 8001770:	b086      	sub	sp, #24
 8001772:	af00      	add	r7, sp, #0
 8001774:	4603      	mov	r3, r0
 8001776:	60b9      	str	r1, [r7, #8]
 8001778:	607a      	str	r2, [r7, #4]
 800177a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001780:	f7ff ff42 	bl	8001608 <__NVIC_GetPriorityGrouping>
 8001784:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	68b9      	ldr	r1, [r7, #8]
 800178a:	6978      	ldr	r0, [r7, #20]
 800178c:	f7ff ff90 	bl	80016b0 <NVIC_EncodePriority>
 8001790:	4602      	mov	r2, r0
 8001792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001796:	4611      	mov	r1, r2
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff5f 	bl	800165c <__NVIC_SetPriority>
}
 800179e:	bf00      	nop
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	4603      	mov	r3, r0
 80017ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff ff35 	bl	8001624 <__NVIC_EnableIRQ>
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff ffa2 	bl	8001714 <SysTick_Config>
 80017d0:	4603      	mov	r3, r0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017dc:	b480      	push	{r7}
 80017de:	b08b      	sub	sp, #44	; 0x2c
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017e6:	2300      	movs	r3, #0
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017ea:	2300      	movs	r3, #0
 80017ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ee:	e161      	b.n	8001ab4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017f0:	2201      	movs	r2, #1
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	69fa      	ldr	r2, [r7, #28]
 8001800:	4013      	ands	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	429a      	cmp	r2, r3
 800180a:	f040 8150 	bne.w	8001aae <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	4a97      	ldr	r2, [pc, #604]	; (8001a70 <HAL_GPIO_Init+0x294>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d05e      	beq.n	80018d6 <HAL_GPIO_Init+0xfa>
 8001818:	4a95      	ldr	r2, [pc, #596]	; (8001a70 <HAL_GPIO_Init+0x294>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d875      	bhi.n	800190a <HAL_GPIO_Init+0x12e>
 800181e:	4a95      	ldr	r2, [pc, #596]	; (8001a74 <HAL_GPIO_Init+0x298>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d058      	beq.n	80018d6 <HAL_GPIO_Init+0xfa>
 8001824:	4a93      	ldr	r2, [pc, #588]	; (8001a74 <HAL_GPIO_Init+0x298>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d86f      	bhi.n	800190a <HAL_GPIO_Init+0x12e>
 800182a:	4a93      	ldr	r2, [pc, #588]	; (8001a78 <HAL_GPIO_Init+0x29c>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d052      	beq.n	80018d6 <HAL_GPIO_Init+0xfa>
 8001830:	4a91      	ldr	r2, [pc, #580]	; (8001a78 <HAL_GPIO_Init+0x29c>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d869      	bhi.n	800190a <HAL_GPIO_Init+0x12e>
 8001836:	4a91      	ldr	r2, [pc, #580]	; (8001a7c <HAL_GPIO_Init+0x2a0>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d04c      	beq.n	80018d6 <HAL_GPIO_Init+0xfa>
 800183c:	4a8f      	ldr	r2, [pc, #572]	; (8001a7c <HAL_GPIO_Init+0x2a0>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d863      	bhi.n	800190a <HAL_GPIO_Init+0x12e>
 8001842:	4a8f      	ldr	r2, [pc, #572]	; (8001a80 <HAL_GPIO_Init+0x2a4>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d046      	beq.n	80018d6 <HAL_GPIO_Init+0xfa>
 8001848:	4a8d      	ldr	r2, [pc, #564]	; (8001a80 <HAL_GPIO_Init+0x2a4>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d85d      	bhi.n	800190a <HAL_GPIO_Init+0x12e>
 800184e:	2b12      	cmp	r3, #18
 8001850:	d82a      	bhi.n	80018a8 <HAL_GPIO_Init+0xcc>
 8001852:	2b12      	cmp	r3, #18
 8001854:	d859      	bhi.n	800190a <HAL_GPIO_Init+0x12e>
 8001856:	a201      	add	r2, pc, #4	; (adr r2, 800185c <HAL_GPIO_Init+0x80>)
 8001858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800185c:	080018d7 	.word	0x080018d7
 8001860:	080018b1 	.word	0x080018b1
 8001864:	080018c3 	.word	0x080018c3
 8001868:	08001905 	.word	0x08001905
 800186c:	0800190b 	.word	0x0800190b
 8001870:	0800190b 	.word	0x0800190b
 8001874:	0800190b 	.word	0x0800190b
 8001878:	0800190b 	.word	0x0800190b
 800187c:	0800190b 	.word	0x0800190b
 8001880:	0800190b 	.word	0x0800190b
 8001884:	0800190b 	.word	0x0800190b
 8001888:	0800190b 	.word	0x0800190b
 800188c:	0800190b 	.word	0x0800190b
 8001890:	0800190b 	.word	0x0800190b
 8001894:	0800190b 	.word	0x0800190b
 8001898:	0800190b 	.word	0x0800190b
 800189c:	0800190b 	.word	0x0800190b
 80018a0:	080018b9 	.word	0x080018b9
 80018a4:	080018cd 	.word	0x080018cd
 80018a8:	4a76      	ldr	r2, [pc, #472]	; (8001a84 <HAL_GPIO_Init+0x2a8>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d013      	beq.n	80018d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018ae:	e02c      	b.n	800190a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	623b      	str	r3, [r7, #32]
          break;
 80018b6:	e029      	b.n	800190c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	3304      	adds	r3, #4
 80018be:	623b      	str	r3, [r7, #32]
          break;
 80018c0:	e024      	b.n	800190c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	3308      	adds	r3, #8
 80018c8:	623b      	str	r3, [r7, #32]
          break;
 80018ca:	e01f      	b.n	800190c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	330c      	adds	r3, #12
 80018d2:	623b      	str	r3, [r7, #32]
          break;
 80018d4:	e01a      	b.n	800190c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d102      	bne.n	80018e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018de:	2304      	movs	r3, #4
 80018e0:	623b      	str	r3, [r7, #32]
          break;
 80018e2:	e013      	b.n	800190c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d105      	bne.n	80018f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018ec:	2308      	movs	r3, #8
 80018ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	69fa      	ldr	r2, [r7, #28]
 80018f4:	611a      	str	r2, [r3, #16]
          break;
 80018f6:	e009      	b.n	800190c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018f8:	2308      	movs	r3, #8
 80018fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69fa      	ldr	r2, [r7, #28]
 8001900:	615a      	str	r2, [r3, #20]
          break;
 8001902:	e003      	b.n	800190c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001904:	2300      	movs	r3, #0
 8001906:	623b      	str	r3, [r7, #32]
          break;
 8001908:	e000      	b.n	800190c <HAL_GPIO_Init+0x130>
          break;
 800190a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	2bff      	cmp	r3, #255	; 0xff
 8001910:	d801      	bhi.n	8001916 <HAL_GPIO_Init+0x13a>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	e001      	b.n	800191a <HAL_GPIO_Init+0x13e>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	3304      	adds	r3, #4
 800191a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	2bff      	cmp	r3, #255	; 0xff
 8001920:	d802      	bhi.n	8001928 <HAL_GPIO_Init+0x14c>
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	e002      	b.n	800192e <HAL_GPIO_Init+0x152>
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192a:	3b08      	subs	r3, #8
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	210f      	movs	r1, #15
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	fa01 f303 	lsl.w	r3, r1, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	401a      	ands	r2, r3
 8001940:	6a39      	ldr	r1, [r7, #32]
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	fa01 f303 	lsl.w	r3, r1, r3
 8001948:	431a      	orrs	r2, r3
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	f000 80a9 	beq.w	8001aae <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800195c:	4b4a      	ldr	r3, [pc, #296]	; (8001a88 <HAL_GPIO_Init+0x2ac>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	4a49      	ldr	r2, [pc, #292]	; (8001a88 <HAL_GPIO_Init+0x2ac>)
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	6193      	str	r3, [r2, #24]
 8001968:	4b47      	ldr	r3, [pc, #284]	; (8001a88 <HAL_GPIO_Init+0x2ac>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001974:	4a45      	ldr	r2, [pc, #276]	; (8001a8c <HAL_GPIO_Init+0x2b0>)
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	089b      	lsrs	r3, r3, #2
 800197a:	3302      	adds	r3, #2
 800197c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001980:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	f003 0303 	and.w	r3, r3, #3
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	220f      	movs	r2, #15
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	4013      	ands	r3, r2
 8001996:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a3d      	ldr	r2, [pc, #244]	; (8001a90 <HAL_GPIO_Init+0x2b4>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d00d      	beq.n	80019bc <HAL_GPIO_Init+0x1e0>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a3c      	ldr	r2, [pc, #240]	; (8001a94 <HAL_GPIO_Init+0x2b8>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d007      	beq.n	80019b8 <HAL_GPIO_Init+0x1dc>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a3b      	ldr	r2, [pc, #236]	; (8001a98 <HAL_GPIO_Init+0x2bc>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d101      	bne.n	80019b4 <HAL_GPIO_Init+0x1d8>
 80019b0:	2302      	movs	r3, #2
 80019b2:	e004      	b.n	80019be <HAL_GPIO_Init+0x1e2>
 80019b4:	2303      	movs	r3, #3
 80019b6:	e002      	b.n	80019be <HAL_GPIO_Init+0x1e2>
 80019b8:	2301      	movs	r3, #1
 80019ba:	e000      	b.n	80019be <HAL_GPIO_Init+0x1e2>
 80019bc:	2300      	movs	r3, #0
 80019be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c0:	f002 0203 	and.w	r2, r2, #3
 80019c4:	0092      	lsls	r2, r2, #2
 80019c6:	4093      	lsls	r3, r2
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019ce:	492f      	ldr	r1, [pc, #188]	; (8001a8c <HAL_GPIO_Init+0x2b0>)
 80019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d2:	089b      	lsrs	r3, r3, #2
 80019d4:	3302      	adds	r3, #2
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d006      	beq.n	80019f6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019e8:	4b2c      	ldr	r3, [pc, #176]	; (8001a9c <HAL_GPIO_Init+0x2c0>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	492b      	ldr	r1, [pc, #172]	; (8001a9c <HAL_GPIO_Init+0x2c0>)
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	600b      	str	r3, [r1, #0]
 80019f4:	e006      	b.n	8001a04 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019f6:	4b29      	ldr	r3, [pc, #164]	; (8001a9c <HAL_GPIO_Init+0x2c0>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	43db      	mvns	r3, r3
 80019fe:	4927      	ldr	r1, [pc, #156]	; (8001a9c <HAL_GPIO_Init+0x2c0>)
 8001a00:	4013      	ands	r3, r2
 8001a02:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d006      	beq.n	8001a1e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a10:	4b22      	ldr	r3, [pc, #136]	; (8001a9c <HAL_GPIO_Init+0x2c0>)
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	4921      	ldr	r1, [pc, #132]	; (8001a9c <HAL_GPIO_Init+0x2c0>)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	604b      	str	r3, [r1, #4]
 8001a1c:	e006      	b.n	8001a2c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a1e:	4b1f      	ldr	r3, [pc, #124]	; (8001a9c <HAL_GPIO_Init+0x2c0>)
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	43db      	mvns	r3, r3
 8001a26:	491d      	ldr	r1, [pc, #116]	; (8001a9c <HAL_GPIO_Init+0x2c0>)
 8001a28:	4013      	ands	r3, r2
 8001a2a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d006      	beq.n	8001a46 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a38:	4b18      	ldr	r3, [pc, #96]	; (8001a9c <HAL_GPIO_Init+0x2c0>)
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	4917      	ldr	r1, [pc, #92]	; (8001a9c <HAL_GPIO_Init+0x2c0>)
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	608b      	str	r3, [r1, #8]
 8001a44:	e006      	b.n	8001a54 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a46:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <HAL_GPIO_Init+0x2c0>)
 8001a48:	689a      	ldr	r2, [r3, #8]
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	4913      	ldr	r1, [pc, #76]	; (8001a9c <HAL_GPIO_Init+0x2c0>)
 8001a50:	4013      	ands	r3, r2
 8001a52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d01f      	beq.n	8001aa0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a60:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <HAL_GPIO_Init+0x2c0>)
 8001a62:	68da      	ldr	r2, [r3, #12]
 8001a64:	490d      	ldr	r1, [pc, #52]	; (8001a9c <HAL_GPIO_Init+0x2c0>)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	60cb      	str	r3, [r1, #12]
 8001a6c:	e01f      	b.n	8001aae <HAL_GPIO_Init+0x2d2>
 8001a6e:	bf00      	nop
 8001a70:	10320000 	.word	0x10320000
 8001a74:	10310000 	.word	0x10310000
 8001a78:	10220000 	.word	0x10220000
 8001a7c:	10210000 	.word	0x10210000
 8001a80:	10120000 	.word	0x10120000
 8001a84:	10110000 	.word	0x10110000
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40010000 	.word	0x40010000
 8001a90:	40010800 	.word	0x40010800
 8001a94:	40010c00 	.word	0x40010c00
 8001a98:	40011000 	.word	0x40011000
 8001a9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <HAL_GPIO_Init+0x2f4>)
 8001aa2:	68da      	ldr	r2, [r3, #12]
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	4909      	ldr	r1, [pc, #36]	; (8001ad0 <HAL_GPIO_Init+0x2f4>)
 8001aaa:	4013      	ands	r3, r2
 8001aac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aba:	fa22 f303 	lsr.w	r3, r2, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f47f ae96 	bne.w	80017f0 <HAL_GPIO_Init+0x14>
  }
}
 8001ac4:	bf00      	nop
 8001ac6:	bf00      	nop
 8001ac8:	372c      	adds	r7, #44	; 0x2c
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	40010400 	.word	0x40010400

08001ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	460b      	mov	r3, r1
 8001ade:	807b      	strh	r3, [r7, #2]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ae4:	787b      	ldrb	r3, [r7, #1]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aea:	887a      	ldrh	r2, [r7, #2]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001af0:	e003      	b.n	8001afa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001af2:	887b      	ldrh	r3, [r7, #2]
 8001af4:	041a      	lsls	r2, r3, #16
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	611a      	str	r2, [r3, #16]
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr

08001b04 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b16:	887a      	ldrh	r2, [r7, #2]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	041a      	lsls	r2, r3, #16
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	43d9      	mvns	r1, r3
 8001b22:	887b      	ldrh	r3, [r7, #2]
 8001b24:	400b      	ands	r3, r1
 8001b26:	431a      	orrs	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	611a      	str	r2, [r3, #16]
}
 8001b2c:	bf00      	nop
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr
	...

08001b38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e272      	b.n	8002030 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 8087 	beq.w	8001c66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b58:	4b92      	ldr	r3, [pc, #584]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 030c 	and.w	r3, r3, #12
 8001b60:	2b04      	cmp	r3, #4
 8001b62:	d00c      	beq.n	8001b7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b64:	4b8f      	ldr	r3, [pc, #572]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 030c 	and.w	r3, r3, #12
 8001b6c:	2b08      	cmp	r3, #8
 8001b6e:	d112      	bne.n	8001b96 <HAL_RCC_OscConfig+0x5e>
 8001b70:	4b8c      	ldr	r3, [pc, #560]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b7c:	d10b      	bne.n	8001b96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b7e:	4b89      	ldr	r3, [pc, #548]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d06c      	beq.n	8001c64 <HAL_RCC_OscConfig+0x12c>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d168      	bne.n	8001c64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e24c      	b.n	8002030 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b9e:	d106      	bne.n	8001bae <HAL_RCC_OscConfig+0x76>
 8001ba0:	4b80      	ldr	r3, [pc, #512]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a7f      	ldr	r2, [pc, #508]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001baa:	6013      	str	r3, [r2, #0]
 8001bac:	e02e      	b.n	8001c0c <HAL_RCC_OscConfig+0xd4>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10c      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x98>
 8001bb6:	4b7b      	ldr	r3, [pc, #492]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a7a      	ldr	r2, [pc, #488]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	4b78      	ldr	r3, [pc, #480]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a77      	ldr	r2, [pc, #476]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	e01d      	b.n	8001c0c <HAL_RCC_OscConfig+0xd4>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bd8:	d10c      	bne.n	8001bf4 <HAL_RCC_OscConfig+0xbc>
 8001bda:	4b72      	ldr	r3, [pc, #456]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a71      	ldr	r2, [pc, #452]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	4b6f      	ldr	r3, [pc, #444]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a6e      	ldr	r2, [pc, #440]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	e00b      	b.n	8001c0c <HAL_RCC_OscConfig+0xd4>
 8001bf4:	4b6b      	ldr	r3, [pc, #428]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a6a      	ldr	r2, [pc, #424]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	4b68      	ldr	r3, [pc, #416]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a67      	ldr	r2, [pc, #412]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d013      	beq.n	8001c3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c14:	f7ff fcca 	bl	80015ac <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c1c:	f7ff fcc6 	bl	80015ac <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b64      	cmp	r3, #100	; 0x64
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e200      	b.n	8002030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2e:	4b5d      	ldr	r3, [pc, #372]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f0      	beq.n	8001c1c <HAL_RCC_OscConfig+0xe4>
 8001c3a:	e014      	b.n	8001c66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3c:	f7ff fcb6 	bl	80015ac <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c44:	f7ff fcb2 	bl	80015ac <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b64      	cmp	r3, #100	; 0x64
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e1ec      	b.n	8002030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c56:	4b53      	ldr	r3, [pc, #332]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f0      	bne.n	8001c44 <HAL_RCC_OscConfig+0x10c>
 8001c62:	e000      	b.n	8001c66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d063      	beq.n	8001d3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c72:	4b4c      	ldr	r3, [pc, #304]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 030c 	and.w	r3, r3, #12
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00b      	beq.n	8001c96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c7e:	4b49      	ldr	r3, [pc, #292]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f003 030c 	and.w	r3, r3, #12
 8001c86:	2b08      	cmp	r3, #8
 8001c88:	d11c      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x18c>
 8001c8a:	4b46      	ldr	r3, [pc, #280]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d116      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c96:	4b43      	ldr	r3, [pc, #268]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d005      	beq.n	8001cae <HAL_RCC_OscConfig+0x176>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d001      	beq.n	8001cae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e1c0      	b.n	8002030 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cae:	4b3d      	ldr	r3, [pc, #244]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	4939      	ldr	r1, [pc, #228]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc2:	e03a      	b.n	8001d3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d020      	beq.n	8001d0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ccc:	4b36      	ldr	r3, [pc, #216]	; (8001da8 <HAL_RCC_OscConfig+0x270>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd2:	f7ff fc6b 	bl	80015ac <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cda:	f7ff fc67 	bl	80015ac <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e1a1      	b.n	8002030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cec:	4b2d      	ldr	r3, [pc, #180]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0f0      	beq.n	8001cda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf8:	4b2a      	ldr	r3, [pc, #168]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4927      	ldr	r1, [pc, #156]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	600b      	str	r3, [r1, #0]
 8001d0c:	e015      	b.n	8001d3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d0e:	4b26      	ldr	r3, [pc, #152]	; (8001da8 <HAL_RCC_OscConfig+0x270>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d14:	f7ff fc4a 	bl	80015ac <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d1c:	f7ff fc46 	bl	80015ac <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e180      	b.n	8002030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d2e:	4b1d      	ldr	r3, [pc, #116]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f0      	bne.n	8001d1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0308 	and.w	r3, r3, #8
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d03a      	beq.n	8001dbc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d019      	beq.n	8001d82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d4e:	4b17      	ldr	r3, [pc, #92]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d54:	f7ff fc2a 	bl	80015ac <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d5c:	f7ff fc26 	bl	80015ac <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e160      	b.n	8002030 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d6e:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <HAL_RCC_OscConfig+0x26c>)
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d7a:	2001      	movs	r0, #1
 8001d7c:	f000 faa6 	bl	80022cc <RCC_Delay>
 8001d80:	e01c      	b.n	8001dbc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d82:	4b0a      	ldr	r3, [pc, #40]	; (8001dac <HAL_RCC_OscConfig+0x274>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d88:	f7ff fc10 	bl	80015ac <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d8e:	e00f      	b.n	8001db0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d90:	f7ff fc0c 	bl	80015ac <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d908      	bls.n	8001db0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e146      	b.n	8002030 <HAL_RCC_OscConfig+0x4f8>
 8001da2:	bf00      	nop
 8001da4:	40021000 	.word	0x40021000
 8001da8:	42420000 	.word	0x42420000
 8001dac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db0:	4b92      	ldr	r3, [pc, #584]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1e9      	bne.n	8001d90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f000 80a6 	beq.w	8001f16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dce:	4b8b      	ldr	r3, [pc, #556]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10d      	bne.n	8001df6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dda:	4b88      	ldr	r3, [pc, #544]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	4a87      	ldr	r2, [pc, #540]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de4:	61d3      	str	r3, [r2, #28]
 8001de6:	4b85      	ldr	r3, [pc, #532]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dee:	60bb      	str	r3, [r7, #8]
 8001df0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001df2:	2301      	movs	r3, #1
 8001df4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df6:	4b82      	ldr	r3, [pc, #520]	; (8002000 <HAL_RCC_OscConfig+0x4c8>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d118      	bne.n	8001e34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e02:	4b7f      	ldr	r3, [pc, #508]	; (8002000 <HAL_RCC_OscConfig+0x4c8>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a7e      	ldr	r2, [pc, #504]	; (8002000 <HAL_RCC_OscConfig+0x4c8>)
 8001e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e0e:	f7ff fbcd 	bl	80015ac <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e16:	f7ff fbc9 	bl	80015ac <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b64      	cmp	r3, #100	; 0x64
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e103      	b.n	8002030 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e28:	4b75      	ldr	r3, [pc, #468]	; (8002000 <HAL_RCC_OscConfig+0x4c8>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0f0      	beq.n	8001e16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d106      	bne.n	8001e4a <HAL_RCC_OscConfig+0x312>
 8001e3c:	4b6f      	ldr	r3, [pc, #444]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	4a6e      	ldr	r2, [pc, #440]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001e42:	f043 0301 	orr.w	r3, r3, #1
 8001e46:	6213      	str	r3, [r2, #32]
 8001e48:	e02d      	b.n	8001ea6 <HAL_RCC_OscConfig+0x36e>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10c      	bne.n	8001e6c <HAL_RCC_OscConfig+0x334>
 8001e52:	4b6a      	ldr	r3, [pc, #424]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	4a69      	ldr	r2, [pc, #420]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001e58:	f023 0301 	bic.w	r3, r3, #1
 8001e5c:	6213      	str	r3, [r2, #32]
 8001e5e:	4b67      	ldr	r3, [pc, #412]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	4a66      	ldr	r2, [pc, #408]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001e64:	f023 0304 	bic.w	r3, r3, #4
 8001e68:	6213      	str	r3, [r2, #32]
 8001e6a:	e01c      	b.n	8001ea6 <HAL_RCC_OscConfig+0x36e>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	2b05      	cmp	r3, #5
 8001e72:	d10c      	bne.n	8001e8e <HAL_RCC_OscConfig+0x356>
 8001e74:	4b61      	ldr	r3, [pc, #388]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	4a60      	ldr	r2, [pc, #384]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001e7a:	f043 0304 	orr.w	r3, r3, #4
 8001e7e:	6213      	str	r3, [r2, #32]
 8001e80:	4b5e      	ldr	r3, [pc, #376]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	4a5d      	ldr	r2, [pc, #372]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001e86:	f043 0301 	orr.w	r3, r3, #1
 8001e8a:	6213      	str	r3, [r2, #32]
 8001e8c:	e00b      	b.n	8001ea6 <HAL_RCC_OscConfig+0x36e>
 8001e8e:	4b5b      	ldr	r3, [pc, #364]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	4a5a      	ldr	r2, [pc, #360]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001e94:	f023 0301 	bic.w	r3, r3, #1
 8001e98:	6213      	str	r3, [r2, #32]
 8001e9a:	4b58      	ldr	r3, [pc, #352]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	4a57      	ldr	r2, [pc, #348]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001ea0:	f023 0304 	bic.w	r3, r3, #4
 8001ea4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d015      	beq.n	8001eda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eae:	f7ff fb7d 	bl	80015ac <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb4:	e00a      	b.n	8001ecc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb6:	f7ff fb79 	bl	80015ac <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e0b1      	b.n	8002030 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ecc:	4b4b      	ldr	r3, [pc, #300]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0ee      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x37e>
 8001ed8:	e014      	b.n	8001f04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eda:	f7ff fb67 	bl	80015ac <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee0:	e00a      	b.n	8001ef8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee2:	f7ff fb63 	bl	80015ac <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e09b      	b.n	8002030 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ef8:	4b40      	ldr	r3, [pc, #256]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1ee      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f04:	7dfb      	ldrb	r3, [r7, #23]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d105      	bne.n	8001f16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f0a:	4b3c      	ldr	r3, [pc, #240]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	4a3b      	ldr	r2, [pc, #236]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f000 8087 	beq.w	800202e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f20:	4b36      	ldr	r3, [pc, #216]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 030c 	and.w	r3, r3, #12
 8001f28:	2b08      	cmp	r3, #8
 8001f2a:	d061      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d146      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f34:	4b33      	ldr	r3, [pc, #204]	; (8002004 <HAL_RCC_OscConfig+0x4cc>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3a:	f7ff fb37 	bl	80015ac <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f42:	f7ff fb33 	bl	80015ac <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e06d      	b.n	8002030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f54:	4b29      	ldr	r3, [pc, #164]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1f0      	bne.n	8001f42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f68:	d108      	bne.n	8001f7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f6a:	4b24      	ldr	r3, [pc, #144]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	4921      	ldr	r1, [pc, #132]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f7c:	4b1f      	ldr	r3, [pc, #124]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a19      	ldr	r1, [r3, #32]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8c:	430b      	orrs	r3, r1
 8001f8e:	491b      	ldr	r1, [pc, #108]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f94:	4b1b      	ldr	r3, [pc, #108]	; (8002004 <HAL_RCC_OscConfig+0x4cc>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9a:	f7ff fb07 	bl	80015ac <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa2:	f7ff fb03 	bl	80015ac <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e03d      	b.n	8002030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fb4:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0f0      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x46a>
 8001fc0:	e035      	b.n	800202e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc2:	4b10      	ldr	r3, [pc, #64]	; (8002004 <HAL_RCC_OscConfig+0x4cc>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc8:	f7ff faf0 	bl	80015ac <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd0:	f7ff faec 	bl	80015ac <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e026      	b.n	8002030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe2:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <HAL_RCC_OscConfig+0x4c4>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f0      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x498>
 8001fee:	e01e      	b.n	800202e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	69db      	ldr	r3, [r3, #28]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d107      	bne.n	8002008 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e019      	b.n	8002030 <HAL_RCC_OscConfig+0x4f8>
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40007000 	.word	0x40007000
 8002004:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002008:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <HAL_RCC_OscConfig+0x500>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	429a      	cmp	r2, r3
 800201a:	d106      	bne.n	800202a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002026:	429a      	cmp	r2, r3
 8002028:	d001      	beq.n	800202e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e000      	b.n	8002030 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3718      	adds	r7, #24
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40021000 	.word	0x40021000

0800203c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0d0      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002050:	4b6a      	ldr	r3, [pc, #424]	; (80021fc <HAL_RCC_ClockConfig+0x1c0>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	429a      	cmp	r2, r3
 800205c:	d910      	bls.n	8002080 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205e:	4b67      	ldr	r3, [pc, #412]	; (80021fc <HAL_RCC_ClockConfig+0x1c0>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f023 0207 	bic.w	r2, r3, #7
 8002066:	4965      	ldr	r1, [pc, #404]	; (80021fc <HAL_RCC_ClockConfig+0x1c0>)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	4313      	orrs	r3, r2
 800206c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800206e:	4b63      	ldr	r3, [pc, #396]	; (80021fc <HAL_RCC_ClockConfig+0x1c0>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	429a      	cmp	r2, r3
 800207a:	d001      	beq.n	8002080 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e0b8      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d020      	beq.n	80020ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	d005      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002098:	4b59      	ldr	r3, [pc, #356]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	4a58      	ldr	r2, [pc, #352]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 800209e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0308 	and.w	r3, r3, #8
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d005      	beq.n	80020bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020b0:	4b53      	ldr	r3, [pc, #332]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	4a52      	ldr	r2, [pc, #328]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 80020b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020bc:	4b50      	ldr	r3, [pc, #320]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	494d      	ldr	r1, [pc, #308]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d040      	beq.n	800215c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d107      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e2:	4b47      	ldr	r3, [pc, #284]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d115      	bne.n	800211a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e07f      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d107      	bne.n	800210a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020fa:	4b41      	ldr	r3, [pc, #260]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d109      	bne.n	800211a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e073      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210a:	4b3d      	ldr	r3, [pc, #244]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e06b      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800211a:	4b39      	ldr	r3, [pc, #228]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f023 0203 	bic.w	r2, r3, #3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	4936      	ldr	r1, [pc, #216]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 8002128:	4313      	orrs	r3, r2
 800212a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800212c:	f7ff fa3e 	bl	80015ac <HAL_GetTick>
 8002130:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002132:	e00a      	b.n	800214a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002134:	f7ff fa3a 	bl	80015ac <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002142:	4293      	cmp	r3, r2
 8002144:	d901      	bls.n	800214a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e053      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214a:	4b2d      	ldr	r3, [pc, #180]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f003 020c 	and.w	r2, r3, #12
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	429a      	cmp	r2, r3
 800215a:	d1eb      	bne.n	8002134 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800215c:	4b27      	ldr	r3, [pc, #156]	; (80021fc <HAL_RCC_ClockConfig+0x1c0>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d210      	bcs.n	800218c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216a:	4b24      	ldr	r3, [pc, #144]	; (80021fc <HAL_RCC_ClockConfig+0x1c0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f023 0207 	bic.w	r2, r3, #7
 8002172:	4922      	ldr	r1, [pc, #136]	; (80021fc <HAL_RCC_ClockConfig+0x1c0>)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	4313      	orrs	r3, r2
 8002178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800217a:	4b20      	ldr	r3, [pc, #128]	; (80021fc <HAL_RCC_ClockConfig+0x1c0>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	d001      	beq.n	800218c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e032      	b.n	80021f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b00      	cmp	r3, #0
 8002196:	d008      	beq.n	80021aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002198:	4b19      	ldr	r3, [pc, #100]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	4916      	ldr	r1, [pc, #88]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0308 	and.w	r3, r3, #8
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d009      	beq.n	80021ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021b6:	4b12      	ldr	r3, [pc, #72]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	490e      	ldr	r1, [pc, #56]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021ca:	f000 f821 	bl	8002210 <HAL_RCC_GetSysClockFreq>
 80021ce:	4602      	mov	r2, r0
 80021d0:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <HAL_RCC_ClockConfig+0x1c4>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	091b      	lsrs	r3, r3, #4
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	490a      	ldr	r1, [pc, #40]	; (8002204 <HAL_RCC_ClockConfig+0x1c8>)
 80021dc:	5ccb      	ldrb	r3, [r1, r3]
 80021de:	fa22 f303 	lsr.w	r3, r2, r3
 80021e2:	4a09      	ldr	r2, [pc, #36]	; (8002208 <HAL_RCC_ClockConfig+0x1cc>)
 80021e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021e6:	4b09      	ldr	r3, [pc, #36]	; (800220c <HAL_RCC_ClockConfig+0x1d0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff f99c 	bl	8001528 <HAL_InitTick>

  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40022000 	.word	0x40022000
 8002200:	40021000 	.word	0x40021000
 8002204:	08002b50 	.word	0x08002b50
 8002208:	20000028 	.word	0x20000028
 800220c:	2000002c 	.word	0x2000002c

08002210 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002210:	b490      	push	{r4, r7}
 8002212:	b08a      	sub	sp, #40	; 0x28
 8002214:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002216:	4b29      	ldr	r3, [pc, #164]	; (80022bc <HAL_RCC_GetSysClockFreq+0xac>)
 8002218:	1d3c      	adds	r4, r7, #4
 800221a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800221c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002220:	f240 2301 	movw	r3, #513	; 0x201
 8002224:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
 800222a:	2300      	movs	r3, #0
 800222c:	61bb      	str	r3, [r7, #24]
 800222e:	2300      	movs	r3, #0
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002236:	2300      	movs	r3, #0
 8002238:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800223a:	4b21      	ldr	r3, [pc, #132]	; (80022c0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	f003 030c 	and.w	r3, r3, #12
 8002246:	2b04      	cmp	r3, #4
 8002248:	d002      	beq.n	8002250 <HAL_RCC_GetSysClockFreq+0x40>
 800224a:	2b08      	cmp	r3, #8
 800224c:	d003      	beq.n	8002256 <HAL_RCC_GetSysClockFreq+0x46>
 800224e:	e02b      	b.n	80022a8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002250:	4b1c      	ldr	r3, [pc, #112]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002252:	623b      	str	r3, [r7, #32]
      break;
 8002254:	e02b      	b.n	80022ae <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	0c9b      	lsrs	r3, r3, #18
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	3328      	adds	r3, #40	; 0x28
 8002260:	443b      	add	r3, r7
 8002262:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002266:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d012      	beq.n	8002298 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002272:	4b13      	ldr	r3, [pc, #76]	; (80022c0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	0c5b      	lsrs	r3, r3, #17
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	3328      	adds	r3, #40	; 0x28
 800227e:	443b      	add	r3, r7
 8002280:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002284:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	4a0e      	ldr	r2, [pc, #56]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800228a:	fb03 f202 	mul.w	r2, r3, r2
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	fbb2 f3f3 	udiv	r3, r2, r3
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
 8002296:	e004      	b.n	80022a2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	4a0b      	ldr	r2, [pc, #44]	; (80022c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800229c:	fb02 f303 	mul.w	r3, r2, r3
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	623b      	str	r3, [r7, #32]
      break;
 80022a6:	e002      	b.n	80022ae <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022a8:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022aa:	623b      	str	r3, [r7, #32]
      break;
 80022ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022ae:	6a3b      	ldr	r3, [r7, #32]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3728      	adds	r7, #40	; 0x28
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bc90      	pop	{r4, r7}
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	08002b40 	.word	0x08002b40
 80022c0:	40021000 	.word	0x40021000
 80022c4:	007a1200 	.word	0x007a1200
 80022c8:	003d0900 	.word	0x003d0900

080022cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022d4:	4b0a      	ldr	r3, [pc, #40]	; (8002300 <RCC_Delay+0x34>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a0a      	ldr	r2, [pc, #40]	; (8002304 <RCC_Delay+0x38>)
 80022da:	fba2 2303 	umull	r2, r3, r2, r3
 80022de:	0a5b      	lsrs	r3, r3, #9
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	fb02 f303 	mul.w	r3, r2, r3
 80022e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022e8:	bf00      	nop
  }
  while (Delay --);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	1e5a      	subs	r2, r3, #1
 80022ee:	60fa      	str	r2, [r7, #12]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1f9      	bne.n	80022e8 <RCC_Delay+0x1c>
}
 80022f4:	bf00      	nop
 80022f6:	bf00      	nop
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr
 8002300:	20000028 	.word	0x20000028
 8002304:	10624dd3 	.word	0x10624dd3

08002308 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e041      	b.n	800239e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d106      	bne.n	8002334 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7ff f862 	bl	80013f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2202      	movs	r2, #2
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3304      	adds	r3, #4
 8002344:	4619      	mov	r1, r3
 8002346:	4610      	mov	r0, r2
 8002348:	f000 fa6a 	bl	8002820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d001      	beq.n	80023c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e035      	b.n	800242c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2202      	movs	r2, #2
 80023c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0201 	orr.w	r2, r2, #1
 80023d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a16      	ldr	r2, [pc, #88]	; (8002438 <HAL_TIM_Base_Start_IT+0x90>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d009      	beq.n	80023f6 <HAL_TIM_Base_Start_IT+0x4e>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ea:	d004      	beq.n	80023f6 <HAL_TIM_Base_Start_IT+0x4e>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a12      	ldr	r2, [pc, #72]	; (800243c <HAL_TIM_Base_Start_IT+0x94>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d111      	bne.n	800241a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2b06      	cmp	r3, #6
 8002406:	d010      	beq.n	800242a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0201 	orr.w	r2, r2, #1
 8002416:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002418:	e007      	b.n	800242a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f042 0201 	orr.w	r2, r2, #1
 8002428:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	bc80      	pop	{r7}
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40012c00 	.word	0x40012c00
 800243c:	40000400 	.word	0x40000400

08002440 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b02      	cmp	r3, #2
 8002454:	d122      	bne.n	800249c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b02      	cmp	r3, #2
 8002462:	d11b      	bne.n	800249c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f06f 0202 	mvn.w	r2, #2
 800246c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2201      	movs	r2, #1
 8002472:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 f9b1 	bl	80027ea <HAL_TIM_IC_CaptureCallback>
 8002488:	e005      	b.n	8002496 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f9a4 	bl	80027d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 f9b3 	bl	80027fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	f003 0304 	and.w	r3, r3, #4
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d122      	bne.n	80024f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d11b      	bne.n	80024f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f06f 0204 	mvn.w	r2, #4
 80024c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2202      	movs	r2, #2
 80024c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f987 	bl	80027ea <HAL_TIM_IC_CaptureCallback>
 80024dc:	e005      	b.n	80024ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f97a 	bl	80027d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 f989 	bl	80027fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d122      	bne.n	8002544 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f003 0308 	and.w	r3, r3, #8
 8002508:	2b08      	cmp	r3, #8
 800250a:	d11b      	bne.n	8002544 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f06f 0208 	mvn.w	r2, #8
 8002514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2204      	movs	r2, #4
 800251a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f95d 	bl	80027ea <HAL_TIM_IC_CaptureCallback>
 8002530:	e005      	b.n	800253e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f950 	bl	80027d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 f95f 	bl	80027fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	f003 0310 	and.w	r3, r3, #16
 800254e:	2b10      	cmp	r3, #16
 8002550:	d122      	bne.n	8002598 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	f003 0310 	and.w	r3, r3, #16
 800255c:	2b10      	cmp	r3, #16
 800255e:	d11b      	bne.n	8002598 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f06f 0210 	mvn.w	r2, #16
 8002568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2208      	movs	r2, #8
 800256e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f933 	bl	80027ea <HAL_TIM_IC_CaptureCallback>
 8002584:	e005      	b.n	8002592 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f926 	bl	80027d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 f935 	bl	80027fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d10e      	bne.n	80025c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d107      	bne.n	80025c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f06f 0201 	mvn.w	r2, #1
 80025bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7fe fee8 	bl	8001394 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ce:	2b80      	cmp	r3, #128	; 0x80
 80025d0:	d10e      	bne.n	80025f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025dc:	2b80      	cmp	r3, #128	; 0x80
 80025de:	d107      	bne.n	80025f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 fa67 	bl	8002abe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025fa:	2b40      	cmp	r3, #64	; 0x40
 80025fc:	d10e      	bne.n	800261c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002608:	2b40      	cmp	r3, #64	; 0x40
 800260a:	d107      	bne.n	800261c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f8f9 	bl	800280e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	f003 0320 	and.w	r3, r3, #32
 8002626:	2b20      	cmp	r3, #32
 8002628:	d10e      	bne.n	8002648 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f003 0320 	and.w	r3, r3, #32
 8002634:	2b20      	cmp	r3, #32
 8002636:	d107      	bne.n	8002648 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f06f 0220 	mvn.w	r2, #32
 8002640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 fa32 	bl	8002aac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002648:	bf00      	nop
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002660:	2b01      	cmp	r3, #1
 8002662:	d101      	bne.n	8002668 <HAL_TIM_ConfigClockSource+0x18>
 8002664:	2302      	movs	r3, #2
 8002666:	e0b3      	b.n	80027d0 <HAL_TIM_ConfigClockSource+0x180>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2202      	movs	r2, #2
 8002674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002686:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800268e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026a0:	d03e      	beq.n	8002720 <HAL_TIM_ConfigClockSource+0xd0>
 80026a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026a6:	f200 8087 	bhi.w	80027b8 <HAL_TIM_ConfigClockSource+0x168>
 80026aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026ae:	f000 8085 	beq.w	80027bc <HAL_TIM_ConfigClockSource+0x16c>
 80026b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026b6:	d87f      	bhi.n	80027b8 <HAL_TIM_ConfigClockSource+0x168>
 80026b8:	2b70      	cmp	r3, #112	; 0x70
 80026ba:	d01a      	beq.n	80026f2 <HAL_TIM_ConfigClockSource+0xa2>
 80026bc:	2b70      	cmp	r3, #112	; 0x70
 80026be:	d87b      	bhi.n	80027b8 <HAL_TIM_ConfigClockSource+0x168>
 80026c0:	2b60      	cmp	r3, #96	; 0x60
 80026c2:	d050      	beq.n	8002766 <HAL_TIM_ConfigClockSource+0x116>
 80026c4:	2b60      	cmp	r3, #96	; 0x60
 80026c6:	d877      	bhi.n	80027b8 <HAL_TIM_ConfigClockSource+0x168>
 80026c8:	2b50      	cmp	r3, #80	; 0x50
 80026ca:	d03c      	beq.n	8002746 <HAL_TIM_ConfigClockSource+0xf6>
 80026cc:	2b50      	cmp	r3, #80	; 0x50
 80026ce:	d873      	bhi.n	80027b8 <HAL_TIM_ConfigClockSource+0x168>
 80026d0:	2b40      	cmp	r3, #64	; 0x40
 80026d2:	d058      	beq.n	8002786 <HAL_TIM_ConfigClockSource+0x136>
 80026d4:	2b40      	cmp	r3, #64	; 0x40
 80026d6:	d86f      	bhi.n	80027b8 <HAL_TIM_ConfigClockSource+0x168>
 80026d8:	2b30      	cmp	r3, #48	; 0x30
 80026da:	d064      	beq.n	80027a6 <HAL_TIM_ConfigClockSource+0x156>
 80026dc:	2b30      	cmp	r3, #48	; 0x30
 80026de:	d86b      	bhi.n	80027b8 <HAL_TIM_ConfigClockSource+0x168>
 80026e0:	2b20      	cmp	r3, #32
 80026e2:	d060      	beq.n	80027a6 <HAL_TIM_ConfigClockSource+0x156>
 80026e4:	2b20      	cmp	r3, #32
 80026e6:	d867      	bhi.n	80027b8 <HAL_TIM_ConfigClockSource+0x168>
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d05c      	beq.n	80027a6 <HAL_TIM_ConfigClockSource+0x156>
 80026ec:	2b10      	cmp	r3, #16
 80026ee:	d05a      	beq.n	80027a6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80026f0:	e062      	b.n	80027b8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6818      	ldr	r0, [r3, #0]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	6899      	ldr	r1, [r3, #8]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	f000 f95c 	bl	80029be <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002714:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	609a      	str	r2, [r3, #8]
      break;
 800271e:	e04e      	b.n	80027be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6818      	ldr	r0, [r3, #0]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	6899      	ldr	r1, [r3, #8]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	f000 f945 	bl	80029be <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689a      	ldr	r2, [r3, #8]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002742:	609a      	str	r2, [r3, #8]
      break;
 8002744:	e03b      	b.n	80027be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6818      	ldr	r0, [r3, #0]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	6859      	ldr	r1, [r3, #4]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	461a      	mov	r2, r3
 8002754:	f000 f8bc 	bl	80028d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2150      	movs	r1, #80	; 0x50
 800275e:	4618      	mov	r0, r3
 8002760:	f000 f913 	bl	800298a <TIM_ITRx_SetConfig>
      break;
 8002764:	e02b      	b.n	80027be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6818      	ldr	r0, [r3, #0]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	6859      	ldr	r1, [r3, #4]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	461a      	mov	r2, r3
 8002774:	f000 f8da 	bl	800292c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2160      	movs	r1, #96	; 0x60
 800277e:	4618      	mov	r0, r3
 8002780:	f000 f903 	bl	800298a <TIM_ITRx_SetConfig>
      break;
 8002784:	e01b      	b.n	80027be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6818      	ldr	r0, [r3, #0]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	6859      	ldr	r1, [r3, #4]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	461a      	mov	r2, r3
 8002794:	f000 f89c 	bl	80028d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2140      	movs	r1, #64	; 0x40
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 f8f3 	bl	800298a <TIM_ITRx_SetConfig>
      break;
 80027a4:	e00b      	b.n	80027be <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4619      	mov	r1, r3
 80027b0:	4610      	mov	r0, r2
 80027b2:	f000 f8ea 	bl	800298a <TIM_ITRx_SetConfig>
        break;
 80027b6:	e002      	b.n	80027be <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80027b8:	bf00      	nop
 80027ba:	e000      	b.n	80027be <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80027bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr

080027ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr

080027fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	bc80      	pop	{r7}
 800280c:	4770      	bx	lr

0800280e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr

08002820 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a25      	ldr	r2, [pc, #148]	; (80028c8 <TIM_Base_SetConfig+0xa8>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d007      	beq.n	8002848 <TIM_Base_SetConfig+0x28>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800283e:	d003      	beq.n	8002848 <TIM_Base_SetConfig+0x28>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a22      	ldr	r2, [pc, #136]	; (80028cc <TIM_Base_SetConfig+0xac>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d108      	bne.n	800285a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800284e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	4313      	orrs	r3, r2
 8002858:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a1a      	ldr	r2, [pc, #104]	; (80028c8 <TIM_Base_SetConfig+0xa8>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d007      	beq.n	8002872 <TIM_Base_SetConfig+0x52>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002868:	d003      	beq.n	8002872 <TIM_Base_SetConfig+0x52>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a17      	ldr	r2, [pc, #92]	; (80028cc <TIM_Base_SetConfig+0xac>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d108      	bne.n	8002884 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002878:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	4313      	orrs	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	4313      	orrs	r3, r2
 8002890:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a07      	ldr	r2, [pc, #28]	; (80028c8 <TIM_Base_SetConfig+0xa8>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d103      	bne.n	80028b8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	615a      	str	r2, [r3, #20]
}
 80028be:	bf00      	nop
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr
 80028c8:	40012c00 	.word	0x40012c00
 80028cc:	40000400 	.word	0x40000400

080028d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b087      	sub	sp, #28
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	f023 0201 	bic.w	r2, r3, #1
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	011b      	lsls	r3, r3, #4
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	4313      	orrs	r3, r2
 8002904:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f023 030a 	bic.w	r3, r3, #10
 800290c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	4313      	orrs	r3, r2
 8002914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	621a      	str	r2, [r3, #32]
}
 8002922:	bf00      	nop
 8002924:	371c      	adds	r7, #28
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr

0800292c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800292c:	b480      	push	{r7}
 800292e:	b087      	sub	sp, #28
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	f023 0210 	bic.w	r2, r3, #16
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002956:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	031b      	lsls	r3, r3, #12
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	4313      	orrs	r3, r2
 8002960:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002968:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	011b      	lsls	r3, r3, #4
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	4313      	orrs	r3, r2
 8002972:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	621a      	str	r2, [r3, #32]
}
 8002980:	bf00      	nop
 8002982:	371c      	adds	r7, #28
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr

0800298a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800298a:	b480      	push	{r7}
 800298c:	b085      	sub	sp, #20
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
 8002992:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	f043 0307 	orr.w	r3, r3, #7
 80029ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	609a      	str	r2, [r3, #8]
}
 80029b4:	bf00      	nop
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bc80      	pop	{r7}
 80029bc:	4770      	bx	lr

080029be <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029be:	b480      	push	{r7}
 80029c0:	b087      	sub	sp, #28
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	60f8      	str	r0, [r7, #12]
 80029c6:	60b9      	str	r1, [r7, #8]
 80029c8:	607a      	str	r2, [r7, #4]
 80029ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029d8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	021a      	lsls	r2, r3, #8
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	431a      	orrs	r2, r3
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	609a      	str	r2, [r3, #8]
}
 80029f2:	bf00      	nop
 80029f4:	371c      	adds	r7, #28
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr

080029fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e041      	b.n	8002a98 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a14      	ldr	r2, [pc, #80]	; (8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d009      	beq.n	8002a6c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a60:	d004      	beq.n	8002a6c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a10      	ldr	r2, [pc, #64]	; (8002aa8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d10c      	bne.n	8002a86 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a72:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bc80      	pop	{r7}
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40012c00 	.word	0x40012c00
 8002aa8:	40000400 	.word	0x40000400

08002aac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bc80      	pop	{r7}
 8002abc:	4770      	bx	lr

08002abe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr

08002ad0 <__libc_init_array>:
 8002ad0:	b570      	push	{r4, r5, r6, lr}
 8002ad2:	2600      	movs	r6, #0
 8002ad4:	4d0c      	ldr	r5, [pc, #48]	; (8002b08 <__libc_init_array+0x38>)
 8002ad6:	4c0d      	ldr	r4, [pc, #52]	; (8002b0c <__libc_init_array+0x3c>)
 8002ad8:	1b64      	subs	r4, r4, r5
 8002ada:	10a4      	asrs	r4, r4, #2
 8002adc:	42a6      	cmp	r6, r4
 8002ade:	d109      	bne.n	8002af4 <__libc_init_array+0x24>
 8002ae0:	f000 f822 	bl	8002b28 <_init>
 8002ae4:	2600      	movs	r6, #0
 8002ae6:	4d0a      	ldr	r5, [pc, #40]	; (8002b10 <__libc_init_array+0x40>)
 8002ae8:	4c0a      	ldr	r4, [pc, #40]	; (8002b14 <__libc_init_array+0x44>)
 8002aea:	1b64      	subs	r4, r4, r5
 8002aec:	10a4      	asrs	r4, r4, #2
 8002aee:	42a6      	cmp	r6, r4
 8002af0:	d105      	bne.n	8002afe <__libc_init_array+0x2e>
 8002af2:	bd70      	pop	{r4, r5, r6, pc}
 8002af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002af8:	4798      	blx	r3
 8002afa:	3601      	adds	r6, #1
 8002afc:	e7ee      	b.n	8002adc <__libc_init_array+0xc>
 8002afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b02:	4798      	blx	r3
 8002b04:	3601      	adds	r6, #1
 8002b06:	e7f2      	b.n	8002aee <__libc_init_array+0x1e>
 8002b08:	08002b60 	.word	0x08002b60
 8002b0c:	08002b60 	.word	0x08002b60
 8002b10:	08002b60 	.word	0x08002b60
 8002b14:	08002b64 	.word	0x08002b64

08002b18 <memset>:
 8002b18:	4603      	mov	r3, r0
 8002b1a:	4402      	add	r2, r0
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d100      	bne.n	8002b22 <memset+0xa>
 8002b20:	4770      	bx	lr
 8002b22:	f803 1b01 	strb.w	r1, [r3], #1
 8002b26:	e7f9      	b.n	8002b1c <memset+0x4>

08002b28 <_init>:
 8002b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b2a:	bf00      	nop
 8002b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b2e:	bc08      	pop	{r3}
 8002b30:	469e      	mov	lr, r3
 8002b32:	4770      	bx	lr

08002b34 <_fini>:
 8002b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b36:	bf00      	nop
 8002b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b3a:	bc08      	pop	{r3}
 8002b3c:	469e      	mov	lr, r3
 8002b3e:	4770      	bx	lr
